{"version":3,"sources":["mode.js","PersistentAVLTree.js","img/plus.svg","img/ray.svg","App.js","reportWebVitals.js","index.js"],"names":["modes","NONE","CREATING_LINE_SEGMENT","SHOOTING_RAY","getHeight","node","height","getBalance","right","left","Line","startX","startY","endX","endY","this","Node","element","id","Math","random","updateHeight","max","copyNode","newNode","og","copySubtree","PersistentAVLTree","comparisonFunc","_compare","sortLeftToRight","current","versions","currVersionNum","a","b","x","undefined","console","log","aCurrY","bCurrY","push","version","length","tree","_search","path","getMin","i","versionTree","getVersion","tempTree","_insert","successor","getSuccessor","prototype","search","direction","insert","balance","subLeftDirection","_rightRotate","_leftRotate","subRightDirection","l","lr","r","rl","delete","_delete","parent","oldNode","detachedMax","_deleteMax","_balance","deleteMax","getMax","newRoot","y","z","_getTallestSubtree","_triNodeRestructure","c","forEach","func","_forEach","getElementsAtDepth","targetDepth","foundNodes","_getElementsAtDepth","App","useState","Mode","mode","setMode","firstPoint","setFirstPoint","lines","setLines","setTree","canvasRef","useRef","buildTree","useCallback","sortedLines","sort","first","second","x1","reverseSortedLines","x2","lineIdx","reverseLineIdx","window","innerWidth","y1","y2","innerHeight","step","createLineElement","line","elem","document","createElementNS","setAttribute","createCircleElement","className","onClick","e","target","tagName","toLowerCase","clientX","clientY","appendChild","newPoint","concat","src","plusIcon","alt","rayIcon","ref","width","onMouseMove","getElementById","remove","shootVerticalRay","topRayY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e17188b3.chunk.js","sourcesContent":["const modes = {\n  NONE: 0,\n  CREATING_LINE_SEGMENT: 1,\n  SHOOTING_RAY: 2\n};\n\nexport default modes;","function getHeight(node) {\n  if (node === null) {\n    return 0;\n  }\n  return node.height;\n}\n\nfunction getBalance(node) {\n  if (node === null) {\n    return 0;\n  }\n\n  return getHeight(node.right) - getHeight(node.left);\n}\n\nexport class Line {\n  startX;\n  startY;\n  endX;\n  endY;\n\n  constructor(startX, startY, endX, endY) {\n    this.startX = startX;\n    this.startY = startY;\n    this.endX = endX;\n    this.endY = endY;\n  }\n}\n\nfunction Node(element) {\n  this.element = element;\n  this.height = 1;\n  this.left = null;\n  this.right = null;\n  this.id = Math.random();\n}\n\n// function sortLeftToRight(a, b) {\n//   if (ptX < startX || ptX > endX) {\n//     throw \"Point not in range of line!\";\n//   }\n//   const slope = (endY - startY) / (endX - endY);\n//   const currY = startY + slope * (ptX - startX);\n//   return currY < ptY ? -1 : 1;\n\n//   if (a.startY < b.startY) {\n//     return -1;\n//   } else if (a.startY > b.startY) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\nfunction compPointToLine(ptX, ptY, line) {\n  const { startX, startY, endX, endY } = line;\n  if (ptX < startX || ptX > endX) {\n    throw \"Point not in range of line!\";\n  }\n  const slope = (endY - startY) / (endX - endY);\n  const currY = startY + slope * (ptX - startX);\n  return currY < ptY ? -1 : 1;\n}\n\nfunction updateHeight(node) {\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n}\n\nfunction copyNode(node) {\n  const newNode = new Node(node.element);\n  newNode.left = node.left;\n  newNode.right = node.right;\n  newNode.height = node.height;\n  newNode.og = node;\n  //console.log(\"copying: \", node, newNode);\n  return newNode;\n}\n\nfunction copySubtree(node) {\n  if (node === null) {\n    return null;\n  }\n  //console.log(\"copyign subtree\", node.element);\n  const newNode = copyNode(node);\n  newNode.left = copySubtree(node.left);\n  newNode.right = copySubtree(node.right);\n  return newNode;\n}\n\nexport class PersistentAVLTree {\n  constructor(comparisonFunc) {\n    if (typeof comparisonFunc === \"function\") {\n      this._compare = comparisonFunc;\n    } else {\n      this._compare = this.sortLeftToRight;\n    }\n    this.current = null;\n    this.versions = [];\n    this.currVersionNum = 0;\n  }\n\n  // make a different compare functino for comparing points\n  sortLeftToRight(a, b) {\n    let x;\n    if (a.endX === undefined && a.endY === undefined) {\n      x = a.startX;\n    } else {\n      if (\n        this.currVersionNum < a.startX ||\n        this.currVersionNum > a.endX ||\n        this.currVersionNum < b.startX ||\n        this.currVersionNum > b.endX\n      ) {\n        console.log(\"OUT OF RANGE FUCK\", this.currVersionNum, a, b);\n        // console.log(\"OUT OF RANGE FUCK\");\n        throw \"Point not in range of line!\";\n      }\n      x = this.currVersionNum;\n    }\n\n    const aCurrY =\n      a.endX === undefined && a.endY === undefined\n        ? a.startY\n        : a.startY +\n          ((a.endY - a.startY) / (a.endX - a.startX)) * (x - a.startX);\n    const bCurrY =\n      b.startY + ((b.endY - b.startY) / (b.endX - b.startX)) * (x - b.startX);\n\n    // console.log(x, aCurrY, bCurrY);\n    if (aCurrY < bCurrY) {\n      return -1;\n    } else if (aCurrY > bCurrY) {\n      return 1;\n    }\n    return 0;\n  }\n\n  step() {\n    this.versions.push(this.current);\n    this.currVersionNum += 1;\n    // console.log(this.current);\n  }\n\n  getVersion(version) {\n    return version < this.versions.length ? this.versions[version] : null;\n  }\n\n  getSuccessor(element, tree) {\n    const { node, path } = this._search(element, tree);\n    // console.log(node, path);\n    if (node === null) {\n      return null;\n    }\n    if (node.right) {\n      return this.getMin(node.right);\n    } else {\n      for (let i = path.length - 2; i >= 0; i--) {\n        if (path[i].left === path[i + 1]) {\n          return path[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  shootVerticalRay(version, element) {\n    element = new Line(version, element);\n    console.log(\"element:\", element);\n    const versionTree = this.getVersion(version);\n    if (versionTree === null) {\n      // console.log(\"INVALID VERSION\");\n      return null;\n    }\n    const tempTree = this._insert(element, versionTree);\n    // console.log(versionTree, element, tempTree);\n    const successor = this.getSuccessor(element, tempTree);\n    // console.log(\"SUCCESSOR: \", successor);\n    return successor !== null ? successor : true;\n  }\n}\n\n// TODO: put data on the node.\nPersistentAVLTree.prototype.search = function (element) {\n  var { node } = this._search(element, this.current);\n  return node ? node.element : null;\n};\n\nPersistentAVLTree.prototype._search = function (element, node, path = []) {\n  if (node === null) {\n    return { node, path };\n  }\n\n  path.push(node);\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    return this._search(element, node.left, path);\n  } else if (direction > 0) {\n    return this._search(element, node.right, path);\n  }\n  return { node, path };\n};\n\nPersistentAVLTree.prototype.insert = function (element) {\n  console.log(\"inserting \", element);\n  console.log(\"before\", this.current);\n  this.current = this._insert(element, this.current);\n  console.log(\"after\", this.current);\n};\n\nPersistentAVLTree.prototype._insert = function (element, node) {\n  // if (!(element instanceof Line)) {\n  //   console.log(\"not line:\", element);\n  //   element = new Line(element);\n  // }\n\n  if (node === null) {\n    const newNode = new Node(element);\n    return newNode;\n  }\n  node = copyNode(node);\n\n  // just copy here, propagate to children\n  var direction = this._compare(element, node.element);\n  console.log(\"comapare\", element, node.element, direction);\n  if (direction < 0) {\n    node.left = this._insert(element, node.left);\n  } else if (direction > 0) {\n    node.right = this._insert(element, node.right);\n  }\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n\n  var balance = getBalance(node);\n\n  if (balance < -1) {\n    var subLeftDirection = this._compare(element, node.left.element);\n    if (subLeftDirection < 0) {\n      return copySubtree(this._rightRotate(node));\n    } else if (subLeftDirection > 0) {\n      node.left = this._leftRotate(node.left);\n      return copySubtree(this._rightRotate(node));\n    }\n  } else if (balance > 1) {\n    var subRightDirection = this._compare(element, node.right.element);\n    if (subRightDirection > 0) {\n      return copySubtree(this._leftRotate(node));\n    } else if (subRightDirection < 0) {\n      node.right = this._rightRotate(node.right);\n      return copySubtree(this._leftRotate(node));\n    }\n  }\n  return node;\n};\n\nPersistentAVLTree.prototype._rightRotate = function (node) {\n  console.log(\"RIGHT ROTATE\");\n  var l = node.left;\n  var lr = l.right;\n  l.right = node;\n  node.left = lr;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  l.height = Math.max(getHeight(l.left), getHeight(l.right)) + 1;\n  return l;\n};\n\nPersistentAVLTree.prototype._leftRotate = function (node) {\n  console.log(\"LEFT ROTATE\");\n  var r = node.right;\n  var rl = r.left;\n  r.left = node;\n  node.right = rl;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  r.height = Math.max(getHeight(r.left), getHeight(r.right)) + 1;\n  return r;\n};\n\nPersistentAVLTree.prototype.delete = function (element) {\n  console.log(\"deleting \", element, this.current);\n  if (this.current !== null) {\n    this.current = this._delete(element, this.current, null);\n  }\n};\n\nPersistentAVLTree.prototype._delete = function (element, node, parent) {\n  console.log(\"DELETE: \", element, node, parent);\n  if (node === null) {\n    return null;\n  }\n  const oldNode = node;\n  node = copyNode(node);\n  console.log(\"copyNode: \", node);\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    // go left\n    if (this._compare(element, node.left.element) === 0) {\n      this._delete(element, node.left, node);\n    } else {\n      node.left = this._delete(element, node.left, node);\n    }\n  } else if (direction > 0) {\n    // go right\n    if (this._compare(element, node.right.element) === 0) {\n      this._delete(element, node.right, node);\n    } else {\n      this._delete(element, node.right, node);\n    }\n  } else if (node.left !== null && node.right !== null) {\n    // found our target element\n    var detachedMax = this._deleteMax(node.left, node);\n    node.element = detachedMax.element; // TODO: if we end up adding data to nodes, copy it here\n  } else if (node.left === null) {\n    if (node.right === null) {\n      //console.log(\"both children empty\", node, parent);\n      // both children are empty\n      if (parent === null) {\n        return null;\n      }\n      if (parent.right === oldNode) {\n        //console.log(\"setting right to null\");\n        parent.right = null;\n        //console.log(parent);\n      } else {\n        //console.log(\"setting left to null\");\n        parent.left = null;\n      }\n    } else {\n      // only has right\n      if (parent === null) {\n        return node.right;\n      }\n      if (parent.right === oldNode) {\n        parent.right = node.right;\n      } else {\n        parent.left = node.right;\n      }\n\n      node.right = null;\n    }\n  } else {\n    // only has left\n    if (parent === null) {\n      return node.left;\n    }\n    if (parent.right === oldNode) {\n      parent.right = node.left;\n    } else {\n      parent.left = node.left;\n    }\n\n    node.left = null;\n  }\n  console.log(\"_balance\", node, parent);\n  return this._balance(node, parent); // backtrack and balance everyone\n};\n\nPersistentAVLTree.prototype.deleteMax = function () {\n  return this._deleteMax(this.current, null).element;\n};\n\nPersistentAVLTree.prototype._deleteMax = function (node, parent) {\n  var max;\n  if (node.right === null) {\n    // max found\n    max = this._delete(node.element, node, parent);\n    this._balance(node, parent);\n    return max;\n  } // not yet at max, keep going\n  max = this._deleteMax(node.right, node);\n  this._balance(node, parent); // backtrack and balance everyone in the left sub tree\n  return max;\n};\n\nPersistentAVLTree.prototype.getMin = function (node) {\n  if (node.left === null) {\n    return node;\n  }\n  return this.getMin(node.left);\n};\n\nPersistentAVLTree.prototype.getMax = function (node) {\n  if (node.right === null) {\n    return node;\n  }\n  return this.getMax(node.right);\n};\n\nPersistentAVLTree.prototype._balance = function (node, parent) {\n  // node = copySubtree(node);\n  updateHeight(node);\n  var balance = getBalance(node);\n  var newRoot, x, y, z;\n  if (balance < -1) {\n    node = copySubtree(node);\n    //console.log(\"balance < -1\");\n    z = node;\n    y = node.left;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  } else if (balance > 1) {\n    node = copySubtree(node);\n    //console.log(\"balance > 1\");\n    z = node;\n    y = node.right;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  } else {\n    //console.log(\"no balance needed\");\n  }\n  updateHeight(node);\n  return node;\n};\n\nPersistentAVLTree.prototype._getTallestSubtree = function (node) {\n  var balance = getBalance(node);\n  if (balance < 0) {\n    return node.left;\n  }\n  return node.right;\n};\n\nPersistentAVLTree.prototype._triNodeRestructure = function (x, y, z, parent) {\n  //console.log(x, y, z, parent, this.current);\n  var a, b, c;\n  if (z.right === y && y.left === x) {\n    a = z;\n    b = x;\n    c = y;\n  }\n  if (z.right === y && y.right === x) {\n    a = z;\n    b = y;\n    c = x;\n  }\n  if (z.left === y && y.left === x) {\n    a = x;\n    b = y;\n    c = z;\n  }\n  if (z.left === y && y.right === x) {\n    a = y;\n    b = x;\n    c = z;\n  }\n  if (\n    z.og === this.current ||\n    z === this.current ||\n    z.element === this.current.element // TODO: THIS IS JANK\n  ) {\n    this.current = b;\n  } else if (parent.left === z) {\n    parent.left = b;\n  } else {\n    parent.right = b;\n  }\n  if (b.left !== x && b.left !== y && b.left !== z) {\n    a.right = b.left;\n  }\n  if (b.right !== x && b.right !== y && b.right !== z) {\n    c.left = b.right;\n  }\n  b.left = a;\n  b.right = c;\n  return b;\n};\n\nPersistentAVLTree.prototype.forEach = function (func) {\n  this._forEach(this.current, func);\n};\n\nPersistentAVLTree.prototype._forEach = function (node, func) {\n  if (node !== null) {\n    this._forEach(node.left, func);\n    func(node.element);\n    this._forEach(node.right, func);\n  }\n};\n\nPersistentAVLTree.prototype.getElementsAtDepth = function (targetDepth) {\n  var foundNodes = [];\n  this._getElementsAtDepth(targetDepth, 0, this.current, foundNodes);\n  return foundNodes;\n};\n\nPersistentAVLTree.prototype._getElementsAtDepth = function (\n  targetDepth,\n  current,\n  node,\n  foundNodes\n) {\n  if (node === null) {\n    return;\n  }\n  if (targetDepth === current) {\n    foundNodes.push(node.element);\n    return;\n  }\n  this._getElementsAtDepth(targetDepth, current + 1, node.left, foundNodes);\n  this._getElementsAtDepth(targetDepth, current + 1, node.right, foundNodes);\n};\n\n// module.exports = AvlTree;\n","export default __webpack_public_path__ + \"static/media/plus.18e46bbf.svg\";","export default __webpack_public_path__ + \"static/media/ray.86b55e34.svg\";","import React, { useCallback, useRef, useState } from \"react\";\nimport Mode from \"./mode\";\nimport \"./App.scss\";\nimport { PersistentAVLTree, Line } from \"./PersistentAVLTree\";\n\nimport plusIcon from \"./img/plus.svg\";\nimport rayIcon from \"./img/ray.svg\";\n\nconst App = () => {\n  const [mode, setMode] = useState(Mode.CREATING_LINE_SEGMENT);\n  const [firstPoint, setFirstPoint] = useState(null);\n  const [lines, setLines] = useState([]);\n  const [tree, setTree] = useState(new PersistentAVLTree());\n\n  const canvasRef = useRef(null);\n\n  const buildTree = useCallback(() => {\n    if (lines.length === 0) {\n      return;\n    }\n\n    const tree = new PersistentAVLTree();\n    const dx = 1;\n\n    // TODO: Need to make sure that x coordinates are distinct\n    const sortedLines = [...lines];\n    sortedLines.sort((first, second) => {\n      if (first.x1 < second.x1) {\n        return -1;\n      } else if (first.x1 > second.x1) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    const reverseSortedLines = [...lines];\n    reverseSortedLines.sort((first, second) => {\n      if (first.x2 < second.x2) {\n        return -1;\n      } else if (first.x2 > second.x2) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    // Build AVL tree\n    let lineIdx = 0;\n    let reverseLineIdx = 0;\n\n    for (let i = 0; i < window.innerWidth; i += dx) {\n      if (lineIdx < lines.length && sortedLines[lineIdx].x1 <= i) {\n        const { x1, y1, x2, y2 } = sortedLines[lineIdx];\n        tree.insert(\n          new Line(x1, window.innerHeight - y1, x2, window.innerHeight - y2)\n        );\n        lineIdx++;\n      }\n\n      if (\n        reverseLineIdx < lines.length &&\n        reverseSortedLines[reverseLineIdx].x2 <= i\n      ) {\n        const { x1, y1, x2, y2 } = reverseSortedLines[reverseLineIdx];\n        tree.delete(\n          new Line(x1, window.innerHeight - y1, x2, window.innerHeight - y2)\n        );\n        reverseLineIdx++;\n      }\n\n      tree.step();\n    }\n\n    return tree;\n  }, [lines]);\n\n  const createLineElement = (line, id = null) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    elem.setAttribute(\"x1\", line.x1);\n    elem.setAttribute(\"y1\", line.y1);\n    elem.setAttribute(\"x2\", line.x2);\n    elem.setAttribute(\"y2\", line.y2);\n\n    if (id !== null) {\n      elem.setAttribute(\"id\", id);\n    }\n\n    return elem;\n  };\n\n  const createCircleElement = (x, y, r = 4) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n    elem.setAttribute(\"cx\", x);\n    elem.setAttribute(\"cy\", y);\n    elem.setAttribute(\"r\", r);\n    return elem;\n  };\n\n  const handleClick = (e) => {\n    if (e.target.tagName.toLowerCase() !== \"svg\") return;\n\n    if (mode === Mode.CREATING_LINE_SEGMENT) {\n      if (firstPoint === null) {\n        setFirstPoint({\n          x: e.clientX,\n          y: e.clientY,\n        });\n\n        canvasRef.current.appendChild(createCircleElement(e.clientX, e.clientY));\n      } else {\n        setFirstPoint(null);\n\n        // True if e.clientX/e.clientY describes x1\n        // x1 is the point with the smaller x coordinate\n        const newPoint = e.clientX < firstPoint.x;\n\n        const line = {\n          x1: newPoint ? e.clientX : firstPoint.x,\n          y1: newPoint ? e.clientY : firstPoint.y,\n          x2: !newPoint ? e.clientX : firstPoint.x,\n          y2: !newPoint ? e.clientY : firstPoint.y,\n        };\n\n        setLines(lines.concat(line));\n\n        canvasRef.current.appendChild(createLineElement(line));\n        canvasRef.current.appendChild(createCircleElement(e.clientX, e.clientY));\n      }\n    } else if (mode === Mode.SHOOTING_RAY) {\n      console.log(\n        \"btuhh\"\n        // tree.shootVerticalRay(e.clientX, window.innerHeight - e.clientY)\n      );\n    }\n  };\n\n  const handleMouseMove = (e) => {\n    if (mode !== Mode.SHOOTING_RAY) {\n      return;\n    }\n\n    if (document.getElementById(\"ray\") !== null) {\n      document.getElementById(\"ray\").remove();\n    }\n\n    const elem = tree.shootVerticalRay(e.clientX, window.innerHeight - e.clientY);\n\n    if (elem === null || elem.element === undefined) {\n      return;\n    }\n\n    const {startX, startY, endX, endY} = elem.element;\n    const topRayY = startY + (endY - startY) / (endX - startX) * (e.clientX - startX);\n\n    canvasRef.current.appendChild(createLineElement({\n      x1: e.clientX,\n      y1: e.clientY,\n      x2: e.clientX,\n      y2: window.innerHeight - topRayY\n    }, \"ray\"));\n  };\n\n  return (\n    <div className=\"App\" onClick={handleClick}>\n      <div className=\"vertical-lines\" />\n      <div className=\"horizontal-lines\" />\n      <div className=\"button-bar\">\n        <button\n          className={mode === Mode.CREATING_LINE_SEGMENT ? \"selected\" : \"\"}\n          onClick={() => setMode(Mode.CREATING_LINE_SEGMENT)}\n        >\n          <img src={plusIcon} alt=\"Create line segment\" />\n          <p>Create line segment</p>\n        </button>\n        <button\n          className={mode === Mode.SHOOTING_RAY ? \"selected\" : \"\"}\n          onClick={() => {\n            if (lines.length === 0) {\n              return;\n            }\n\n            setTree(buildTree());\n            setMode(Mode.SHOOTING_RAY);\n          }}\n        >\n          <img src={rayIcon} alt=\"Shoot vertical ray\" />\n          <p>Shoot vertical ray</p>\n        </button>\n      </div>\n      <svg ref={canvasRef} width={window.innerWidth} height={window.innerHeight} onMouseMove={handleMouseMove} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}