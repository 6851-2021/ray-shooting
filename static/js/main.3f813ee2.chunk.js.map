{"version":3,"sources":["mode.js","PersistentAVLTree.js","eventType.js","img/clipboard.svg","img/plus.svg","img/ray.svg","img/wrench.svg","priorityQueue.js","App.js","reportWebVitals.js","index.js"],"names":["modes","NONE","CREATING_LINE_SEGMENT","SHOOTING_RAY","getHeight","node","height","getBalance","right","left","Line","startX","startY","endX","endY","this","Node","element","id","Math","random","isEqual","a","b","updateHeight","max","copyNode","newNode","og","copySubtree","path","Set","has","console","log","PersistentAVLTree","comparisonFunc","_compare","sortLeftToRight","current","versions","currVersionNum","x","undefined","aCurrY","bCurrY","push","version","length","tree","_search","getMin","i","getMax","versionTree","getVersion","tempTree","_insert","successor","getSuccessor","node1","node2","tmp","prototype","search","direction","insert","balance","subLeftDirection","_rightRotate","_leftRotate","subRightDirection","l","lr","r","rl","delete","_delete","parent","oldNode","detachedMax","_deleteMax","_balance","deleteMax","newRoot","y","z","_getTallestSubtree","_triNodeRestructure","c","forEach","func","_forEach","getElementsAtDepth","targetDepth","foundNodes","_getElementsAtDepth","eventType","START","END","CROSS","PriorityQueue","leftChild","index","rightChild","floor","peek","heap","swap","indexOne","indexTwo","idx","val","extractMin","root","shift","unshift","pop","heapify","largest","App","useState","Mode","mode","setMode","firstPoint","setFirstPoint","lines","setLines","setTree","canvasRef","useRef","intersections","buildTree","queue","line","EventType","x1","shouldInsert","x2","window","innerWidth","evt","y1","y2","innerHeight","predecessor","getPredecessor","processIntersection","cmp","x3","y3","x4","y4","onSegment","p","q","min","intersectionX","intersectionY","toString","add","line1","line2","intX","intY","step","ceil","createLineElement","elem","document","createElementNS","setAttribute","createCircleElement","className","onClick","e","target","tagName","toLowerCase","clientX","clientY","appendChild","newPoint","concat","src","plusIcon","alt","rayIcon","firstChild","removeChild","wrenchIcon","textarea","createElement","body","value","JSON","stringify","select","execCommand","clipboardIcon","ref","width","onMouseMove","getElementById","remove","shootVerticalRay","topRayY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3f813ee2.chunk.js","sourcesContent":["const modes = {\n  NONE: 0,\n  CREATING_LINE_SEGMENT: 1,\n  SHOOTING_RAY: 2\n};\n\nexport default modes;","function getHeight(node) {\n  if (node === null) {\n    return 0;\n  }\n  return node.height;\n}\n\nfunction getBalance(node) {\n  if (node === null) {\n    return 0;\n  }\n\n  return getHeight(node.right) - getHeight(node.left);\n}\n\nexport class Line {\n  startX;\n  startY;\n  endX;\n  endY;\n\n  constructor(startX, startY, endX, endY) {\n    this.startX = startX;\n    this.startY = startY;\n    this.endX = endX;\n    this.endY = endY;\n  }\n}\n\nfunction Node(element) {\n  this.element = element;\n  this.height = 1;\n  this.left = null;\n  this.right = null;\n  this.id = Math.random();\n}\n\n// function sortLeftToRight(a, b) {\n//   if (ptX < startX || ptX > endX) {\n//     throw \"Point not in range of line!\";\n//   }\n//   const slope = (endY - startY) / (endX - endY);\n//   const currY = startY + slope * (ptX - startX);\n//   return currY < ptY ? -1 : 1;\n\n//   if (a.startY < b.startY) {\n//     return -1;\n//   } else if (a.startY > b.startY) {\n//     return 1;\n//   }\n//   return 0;\n// }\nfunction isEqual(a, b) {\n  if (a == null || b == null) {\n    return a === b;\n  }\n  return (\n    a.element.startX === b.element.startX &&\n    a.element.startY === b.element.startY &&\n    a.element.endX === b.element.endX &&\n    a.element.endY === b.element.endY\n  );\n}\n\nfunction compPointToLine(ptX, ptY, line) {\n  const { startX, startY, endX, endY } = line;\n  if (ptX < startX || ptX > endX) {\n    throw \"Point not in range of line!\";\n  }\n  const slope = (endY - startY) / (endX - endY);\n  const currY = startY + slope * (ptX - startX);\n  return currY < ptY ? -1 : 1;\n}\n\nfunction updateHeight(node) {\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n}\n\nfunction copyNode(node) {\n  const newNode = new Node(node.element);\n  newNode.left = node.left;\n  newNode.right = node.right;\n  newNode.height = node.height;\n  newNode.og = node;\n  //console.log(\"copying: \", node, newNode);\n  return newNode;\n}\n\nexport function copySubtree(node, path = new Set()) {\n  // console.log(\"about to copy: \", node, path);\n  if (node == null) {\n    return null;\n  }\n  if (path.has(node.id)) {\n    console.log(\"cycle detected!\");\n    console.log(path);\n    return null;\n  }\n  //console.log(\"copyign subtree\", node.element);\n  const newNode = copyNode(node);\n  newNode.left = copySubtree(node.left, new Set([...path, node.id]));\n  newNode.right = copySubtree(node.right, new Set([...path, node.id]));\n  return newNode;\n}\n\nexport class PersistentAVLTree {\n  constructor(comparisonFunc) {\n    if (typeof comparisonFunc === \"function\") {\n      this._compare = comparisonFunc;\n    } else {\n      this._compare = this.sortLeftToRight;\n    }\n    this.current = null;\n    this.versions = [];\n    this.currVersionNum = 0;\n  }\n\n  // make a different compare functino for comparing points\n  sortLeftToRight(a, b) {\n    let x;\n    if (a.endX === undefined && a.endY === undefined) {\n      x = a.startX;\n    } else {\n      if (\n        this.currVersionNum < a.startX ||\n        this.currVersionNum > a.endX ||\n        this.currVersionNum < b.startX ||\n        this.currVersionNum > b.endX\n      ) {\n        console.log(\"OUT OF RANGE FUCK\", this.currVersionNum, a, b);\n        // console.log(\"OUT OF RANGE FUCK\");\n        throw \"Point not in range of line!\";\n      }\n      x = this.currVersionNum;\n    }\n\n    const aCurrY =\n      a.endX === undefined && a.endY === undefined\n        ? a.startY\n        : a.startY +\n          ((a.endY - a.startY) / (a.endX - a.startX)) * (x - a.startX);\n    const bCurrY =\n      b.startY + ((b.endY - b.startY) / (b.endX - b.startX)) * (x - b.startX);\n\n    // console.log(x, aCurrY, bCurrY);\n    if (aCurrY < bCurrY) {\n      return -1;\n    } else if (aCurrY > bCurrY) {\n      return 1;\n    }\n    return 0;\n  }\n\n  step() {\n    this.versions.push(this.current);\n    this.currVersionNum += 1;\n    // console.log(this.current);\n  }\n\n  getVersion(version) {\n    return version < this.versions.length ? this.versions[version] : null;\n  }\n\n  getSuccessor(element, tree) {\n    // console.log(\"GET SUCCESSOR: \", this.currVersionNum, copySubtree( element), tree);\n    const { node, path } = this._search(element, tree);\n    // console.log(node, path);\n    if (node === null || node === undefined) {\n      return null;\n    }\n    if (node.right) {\n      return this.getMin(node.right);\n    } else {\n      for (let i = path.length - 2; i >= 0; i--) {\n        if (path[i].left === path[i + 1]) {\n          return path[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  getPredecessor(element, tree) {\n    const { node, path } = this._search(element, tree);\n    // console.log(node, path);\n    if (node === null || node === undefined) {\n      return null;\n    }\n    if (node.left) {\n      return this.getMax(node.left);\n    } else {\n      for (let i = path.length - 2; i >= 0; i--) {\n        if (path[i].right === path[i + 1]) {\n          return path[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  shootVerticalRay(version, element) {\n    element = new Line(version, element);\n    // console.log(\"element:\", element);\n    const versionTree = this.getVersion(version);\n    if (versionTree === null) {\n      return null;\n    }\n    // console.log(versionTree);\n    const tempTree = this._insert(element, versionTree);\n    // console.log(versionTree, element, tempTree);\n    const successor = this.getSuccessor(element, tempTree);\n    // console.log(\"SUCCESSOR: \", successor);\n    return successor !== null ? successor : true;\n  }\n\n  swap(node1, node2) {\n    const tmp = node1.element;\n    node1.element = node2.element;\n    node2.element = tmp;\n  }\n}\n\n// TODO: put data on the node.\nPersistentAVLTree.prototype.search = function (element) {\n  console.log(\"SEARCH: \", this.currVersionNum, element);\n  var { node } = this._search(element, this.current);\n  return node ? node.element : null;\n};\n\nPersistentAVLTree.prototype._search = function (element, node, path = []) {\n  // console.log(\"_SEARCH: \", this.currVersionNum, copySubtree( element), node, path);\n  if (node === null) {\n    return { node, path };\n  }\n\n  path.push(node);\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    return this._search(element, node.left, path);\n  } else if (direction > 0) {\n    return this._search(element, node.right, path);\n  }\n  return { node, path };\n};\n\nPersistentAVLTree.prototype.insert = function (element) {\n  console.log(\"inserting \", this.currVersionNum);\n  console.log(\"before\", this.currVersionNum, copySubtree(this.current));\n  this.current = this._insert(element, this.current);\n  console.log(\"after\", this.currVersionNum, copySubtree(this.current));\n  return this.current;\n};\n\nPersistentAVLTree.prototype._insert = function (element, node) {\n  // if (!(element instanceof Line)) {\n  //   console.log(\"not line:\", element);\n  //   element = new Line(element);\n  // }\n  // console.log(\"Inserting: \", this.currVersionNum, copySubtree( element));\n  if (node === null) {\n    const newNode = new Node(element);\n    return newNode;\n  }\n  node = copyNode(node);\n\n  // just copy here, propagate to children\n  var direction = this._compare(element, node.element);\n  // console.log(\"comapare\", element, copySubtree( node).element, direction);\n  if (direction < 0) {\n    node.left = this._insert(element, node.left);\n  } else if (direction > 0) {\n    node.right = this._insert(element, node.right);\n  }\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n\n  var balance = getBalance(node);\n\n  if (balance < -1) {\n    var subLeftDirection = this._compare(element, node.left.element);\n    if (subLeftDirection < 0) {\n      return copySubtree(this._rightRotate(node));\n    } else if (subLeftDirection > 0) {\n      node.left = this._leftRotate(node.left);\n      return copySubtree(this._rightRotate(node));\n    }\n  } else if (balance > 1) {\n    var subRightDirection = this._compare(element, node.right.element);\n    if (subRightDirection > 0) {\n      return copySubtree(this._leftRotate(node));\n    } else if (subRightDirection < 0) {\n      node.right = this._rightRotate(node.right);\n      return copySubtree(this._leftRotate(node));\n    }\n  }\n  return node;\n};\n\nPersistentAVLTree.prototype._rightRotate = function (node) {\n  // console.log(\"RIGHT ROTATE\");\n  var l = node.left;\n  var lr = l.right;\n  l.right = node;\n  node.left = lr;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  l.height = Math.max(getHeight(l.left), getHeight(l.right)) + 1;\n  return l;\n};\n\nPersistentAVLTree.prototype._leftRotate = function (node) {\n  // console.log(\"LEFT ROTATE\");\n  var r = node.right;\n  var rl = r.left;\n  r.left = node;\n  node.right = rl;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  r.height = Math.max(getHeight(r.left), getHeight(r.right)) + 1;\n  return r;\n};\n\nPersistentAVLTree.prototype.delete = function (element) {\n  console.log(\n    \"deleting \",\n    this.currVersionNum,\n    element,\n    copySubtree(this.current)\n  );\n  if (this.current !== null) {\n    this.current = this._delete(element, this.current, null);\n    console.log(\"AFTER DELETE: \", copySubtree(this.current));\n  }\n};\n\nPersistentAVLTree.prototype._delete = function (element, node, parent) {\n  console.log(\n    \"DELETE: \",\n    this.currVersionNum,\n    element,\n    copySubtree(node),\n    copySubtree(parent)\n  );\n  if (node === null) {\n    return null;\n  }\n  const oldNode = node;\n  node = copyNode(node);\n  // console.log(\"copyNode: \", node);\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    // go left\n    console.log(\"delete go left\");\n    if (node.left && this._compare(element, node.left.element) === 0) {\n      this._delete(element, node.left, node);\n    } else {\n      node.left = this._delete(element, node.left, node);\n      updateHeight(node);\n      console.log(\"updated left node\");\n    }\n  } else if (direction > 0) {\n    // go right\n    console.log(\"delete go right\");\n    if (node.right && this._compare(element, node.right.element) === 0) {\n      this._delete(element, node.right, node);\n    } else {\n      node.right = this._delete(element, node.right, node);\n      updateHeight(node);\n      console.log(\"updated right node\");\n    }\n  } else if (node.left !== null && node.right !== null) {\n    // found our target element\n    var detachedMax = this._deleteMax(node.left, node);\n    node.element = detachedMax.element; // TODO: if we end up adding data to nodes, copy it here\n    node.height = Math.max(node.right.height, detachedMax.height) + 1;\n    if (parent !== null) {\n      if (parent.right === oldNode) {\n        parent.right = node;\n      } else {\n        parent.left = node;\n      }\n    }\n  } else if (node.left === null) {\n    if (node.right === null) {\n      //console.log(\"both children empty\", copySubtree(node), copySubtree( parent));\n      // both children are empty\n      if (parent === null) {\n        return null;\n      }\n      if (parent.right === oldNode) {\n        //console.log(\"setting right to null\");\n        parent.right = null;\n        //console.log(parent);\n      } else {\n        //console.log(\"setting left to null\");\n        parent.left = null;\n      }\n      updateHeight(parent);\n    } else {\n      // only has right\n      if (parent === null) {\n        return node.right;\n      }\n      if (parent.right === oldNode) {\n        parent.right = node.right;\n      } else {\n        parent.left = node.right;\n      }\n\n      node.right = null;\n      updateHeight(parent);\n    }\n  } else {\n    // only has left\n    if (parent === null) {\n      return node.left;\n    }\n    if (parent.right === oldNode) {\n      parent.right = node.left;\n    } else {\n      parent.left = node.left;\n    }\n\n    node.left = null;\n    updateHeight(parent);\n  }\n  // console.log(\"_balance\", copySubtree(node), copySubtree( parent));\n  return this._balance(node, parent); // backtrack and balance everyone\n};\n\nPersistentAVLTree.prototype.deleteMax = function () {\n  return this._deleteMax(this.current, null).element;\n};\n\nPersistentAVLTree.prototype._deleteMax = function (node, parent) {\n  console.log(\"DELETE_MAX:\");\n  var max;\n  if (node.right === null) {\n    // max found\n    max = this._delete(node.element, node, parent);\n    this._balance(node, parent);\n    console.log(\"MAX: \", max);\n    return max;\n  } // not yet at max, keep going\n  max = this._deleteMax(node.right, node);\n  this._balance(node, parent); // backtrack and balance everyone in the left sub tree\n  return max;\n};\n\nPersistentAVLTree.prototype.getMin = function (node) {\n  if (node.left === null) {\n    return node;\n  }\n  return this.getMin(node.left);\n};\n\nPersistentAVLTree.prototype.getMax = function (node) {\n  if (node.right === null) {\n    return node;\n  }\n  return this.getMax(node.right);\n};\n\nPersistentAVLTree.prototype._balance = function (node, parent) {\n  console.log(\n    \"Balance: \",\n    this.currVersionNum,\n    copySubtree(node),\n    copySubtree(parent)\n  );\n  node = copySubtree(node);\n  console.log(\"node copy: \", node);\n  updateHeight(node);\n  var balance = getBalance(node);\n  var newRoot, x, y, z;\n  if (balance < -1) {\n    node = copySubtree(node);\n    console.log(\"balance < -1\");\n    z = node;\n    y = node.left;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  } else if (balance > 1) {\n    node = copySubtree(node);\n    console.log(\"balance > 1\");\n    z = node;\n    y = node.right;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  } else {\n    console.log(\"no balance needed\");\n  }\n  updateHeight(node);\n  console.log(\"after balance: \", node);\n  return node;\n};\n\nPersistentAVLTree.prototype._getTallestSubtree = function (node) {\n  var balance = getBalance(node);\n  if (balance < 0) {\n    return node.left;\n  }\n  return node.right;\n};\n\nPersistentAVLTree.prototype._triNodeRestructure = function (x, y, z, parent) {\n  console.log(\n    \"TRINODE: \",\n    this.currVersionNum,\n    copySubtree(x),\n    copySubtree(y),\n    copySubtree(z),\n    parent,\n    this.current\n  );\n  var a, b, c;\n  if (z.right === y && y.left === x) {\n    a = z;\n    b = x;\n    c = y;\n  }\n  if (z.right === y && y.right === x) {\n    a = z;\n    b = y;\n    c = x;\n  }\n  if (z.left === y && y.left === x) {\n    a = x;\n    b = y;\n    c = z;\n  }\n  if (z.left === y && y.right === x) {\n    a = y;\n    b = x;\n    c = z;\n  }\n  if (\n    z.og === this.current ||\n    isEqual(z, this.current) ||\n    z === this.current ||\n    z.element === this.current.element || // TODO: THIS IS JANK\n    parent === null\n  ) {\n    this.current = b;\n  } else if (isEqual(parent.left, z)) {\n    parent.left = b;\n  } else {\n    parent.right = b;\n  }\n  if (!isEqual(b.left, x) && !isEqual(b.left, y) && !isEqual(b.left, z)) {\n    console.log(\"a.right := b.left\");\n    a.right = b.left;\n  }\n  console.log(b.right, x, y, z);\n  if (!isEqual(b.right, x) && !isEqual(b.right, y) && !isEqual(b.right, z)) {\n    console.log(\"c.left := b.right\");\n    c.left = b.right;\n  }\n  b.left = a;\n  b.right = c;\n  console.log(\"After Trinode: \", b);\n  return b;\n};\n\nPersistentAVLTree.prototype.forEach = function (func) {\n  this._forEach(this.current, func);\n};\n\nPersistentAVLTree.prototype._forEach = function (node, func) {\n  if (node !== null) {\n    this._forEach(node.left, func);\n    func(node.element);\n    this._forEach(node.right, func);\n  }\n};\n\nPersistentAVLTree.prototype.getElementsAtDepth = function (targetDepth) {\n  var foundNodes = [];\n  this._getElementsAtDepth(targetDepth, 0, this.current, foundNodes);\n  return foundNodes;\n};\n\nPersistentAVLTree.prototype._getElementsAtDepth = function (\n  targetDepth,\n  current,\n  node,\n  foundNodes\n) {\n  if (node === null) {\n    return;\n  }\n  if (targetDepth === current) {\n    foundNodes.push(node.element);\n    return;\n  }\n  this._getElementsAtDepth(targetDepth, current + 1, node.left, foundNodes);\n  this._getElementsAtDepth(targetDepth, current + 1, node.right, foundNodes);\n};\n\n// module.exports = AvlTree;\n","const eventType = {\n  START: 'start',\n  END: 'end',\n  CROSS: 'cross'\n};\n\nexport default eventType;","export default __webpack_public_path__ + \"static/media/clipboard.f03ddbea.svg\";","export default __webpack_public_path__ + \"static/media/plus.18e46bbf.svg\";","export default __webpack_public_path__ + \"static/media/ray.86b55e34.svg\";","export default __webpack_public_path__ + \"static/media/wrench.6be9f8c4.svg\";","export default class PriorityQueue {\n  constructor() {\n    this.heap = [];\n  }\n\n  leftChild = (index) => index * 2 + 1;\n  rightChild = (index) => index * 2 + 2;\n  parent = (index) => Math.floor((index - 1) / 2);\n  peek = () => this.heap[0];\n\n  swap = (indexOne, indexTwo) => {\n    const tmp = this.heap[indexOne];\n    this.heap[indexOne] = this.heap[indexTwo];\n    this.heap[indexTwo] = tmp;\n  }\n\n  insert = (element) => {\n    this.heap.push(element);\n    let idx = this.heap.length - 1;\n\n    while (idx !== 0 && this.heap[idx].val < this.heap[this.parent(idx)].val) {\n      this.swap(idx, this.parent(idx));\n      idx = this.parent(idx);\n    }\n  }\n\n  extractMin = () => {\n    const root = this.heap.shift();\n\n    this.heap.unshift(this.heap[this.heap.length - 1]);\n    this.heap.pop();\n\n    this.heapify(0);\n    return root;\n  }\n  \n  heapify = (index) => {\n    let left = this.leftChild(index);\n    let right = this.rightChild(index);\n    let largest = index;\n\n    if (left < this.heap.length && this.heap[largest].val > this.heap[left].val) {\n      largest = left;\n    }\n\n    if (right < this.heap.length && this.heap[largest].val > this.heap[right].val) {\n      largest = right;\n    }\n\n    if (largest !== index) {\n      this.swap(largest, index);\n      this.heapify(largest);\n    }\n  }\n};","import React, { useRef, useState } from \"react\";\nimport Mode from \"./mode\";\nimport \"./App.scss\";\nimport { PersistentAVLTree, Line, copySubtree } from \"./PersistentAVLTree\";\nimport EventType from \"./eventType\";\n\nimport clipboardIcon from \"./img/clipboard.svg\";\nimport plusIcon from \"./img/plus.svg\";\nimport rayIcon from \"./img/ray.svg\";\nimport wrenchIcon from \"./img/wrench.svg\";\nimport PriorityQueue from \"./priorityQueue\";\n\nconst App = () => {\n  const [mode, setMode] = useState(Mode.CREATING_LINE_SEGMENT);\n  const [firstPoint, setFirstPoint] = useState(null);\n  const [lines, setLines] = useState([]);\n  const [tree, setTree] = useState(new PersistentAVLTree());\n\n  const canvasRef = useRef(null);\n  const intersections = new Set();\n\n  const buildTree = (lines) => {\n    if (lines.length === 0) {\n      return;\n    }\n\n    const tree = new PersistentAVLTree();\n    const dx = 1;\n\n    const queue = new PriorityQueue();\n\n    lines.forEach((line) => {\n      queue.insert({\n        eventType: EventType.START,\n        line,\n        val: line.x1,\n        shouldInsert: true,\n      });\n\n      queue.insert({\n        eventType: EventType.END,\n        line,\n        val: line.x2,\n      });\n    });\n\n    for (let i = 0; i < window.innerWidth; i += dx) {\n      while (queue.peek() !== undefined && queue.peek().val <= i) {\n        const evt = queue.extractMin();\n        console.log(evt);\n\n        if (evt.eventType === EventType.START) {\n          let line, tempTree, x1, y1, x2, y2;\n\n          if (evt.shouldInsert) {\n            x1 = evt.line.x1;\n            y1 = window.innerHeight - evt.line.y1;\n            x2 = evt.line.x2;\n            y2 = window.innerHeight - evt.line.y2;\n\n            line = new Line(x1, y1, x2, y2);\n            tempTree = tree.insert(line);\n          } else {\n            x1 = evt.line.startX;\n            y1 = evt.line.startY;\n            x2 = evt.line.endX;\n            y2 = evt.line.endY;\n\n            line = evt.line;\n            tempTree = tree.current;\n          }\n\n          // Take care of crossing segments that follow this event\n          const successor = tree.getSuccessor(line, tempTree);\n          const predecessor = tree.getPredecessor(line, tempTree);\n\n          const processIntersection = (cmp) => {\n            const x3 = cmp.element.startX;\n            const y3 = cmp.element.startY;\n            const x4 = cmp.element.endX;\n            const y4 = cmp.element.endY;\n\n            // Checks if q is on line segment pr\n            const onSegment = (p, q, r) =>\n              q.x <= Math.max(p.x, r.x) &&\n              q.x >= Math.min(p.x, r.x) &&\n              q.y <= Math.max(p.y, r.y) &&\n              q.y >= Math.min(p.y, r.y);\n\n            const intersectionX =\n              ((x1 * y2 - y1 * x2) * (x3 - x4) -\n                (x1 - x2) * (x3 * y4 - y3 * x4)) /\n              ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n            const intersectionY =\n              ((x1 * y2 - y1 * x2) * (y3 - y4) -\n                (y1 - y2) * (x3 * y4 - y3 * x4)) /\n              ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n\n            if (\n              !intersections.has(intersectionX.toString() + \",\" + intersectionY.toString()) &&\n              // intersectionX > i &&\n              onSegment(\n                { x: x1, y: y1 },\n                { x: intersectionX, y: intersectionY },\n                { x: x2, y: y2 }\n              ) &&\n              onSegment(\n                { x: x3, y: y3 },\n                { x: intersectionX, y: intersectionY },\n                { x: x4, y: y4 }\n              )\n            ) {\n              intersections.add(intersectionX.toString() + \",\" + intersectionY.toString())\n              queue.insert({\n                eventType: EventType.CROSS,\n                line1: line,\n                line2: cmp.element,\n                intX: intersectionX,\n                intY: intersectionY,\n                val: intersectionX - 1,\n              });\n            }\n          };\n\n          if (successor !== null) processIntersection(successor);\n          if (predecessor !== null) processIntersection(predecessor);\n        } else if (evt.eventType === EventType.END) {\n          const { x1, y1, x2, y2 } = evt.line;\n          const line = new Line(\n            x1,\n            window.innerHeight - y1,\n            x2,\n            window.innerHeight - y2\n          );\n          tree.delete(line);\n        } else if (evt.eventType === EventType.CROSS) {\n          const tmp = copySubtree(tree.current);\n          const node1 = tree._search(evt.line1, tmp).node;\n          const node2 = tree._search(evt.line2, tmp).node;\n\n          if (node1 === null || node2 === null) {\n            // TODO: Show error message\n            tree.step();\n            continue;\n          }\n\n          tree.swap(node1, node2);\n          tree.current = tmp;\n\n          queue.insert({\n            eventType: EventType.START,\n            line: node1.element,\n            val: Math.ceil(evt.intX),\n            shouldInsert: false,\n          });\n\n          queue.insert({\n            eventType: EventType.START,\n            line: node2.element,\n            val: Math.ceil(evt.intX),\n            shouldInsert: false,\n          });\n        }\n      }\n\n      tree.step();\n    }\n\n    return tree;\n  };\n\n  const createLineElement = (line, id = null) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    elem.setAttribute(\"x1\", line.x1);\n    elem.setAttribute(\"y1\", line.y1);\n    elem.setAttribute(\"x2\", line.x2);\n    elem.setAttribute(\"y2\", line.y2);\n\n    if (id !== null) {\n      elem.setAttribute(\"id\", id);\n    }\n\n    return elem;\n  };\n\n  const createCircleElement = (x, y, r = 4) => {\n    const elem = document.createElementNS(\n      \"http://www.w3.org/2000/svg\",\n      \"circle\"\n    );\n    elem.setAttribute(\"cx\", x);\n    elem.setAttribute(\"cy\", y);\n    elem.setAttribute(\"r\", r);\n    return elem;\n  };\n\n  const handleClick = (e) => {\n    if (e.target.tagName.toLowerCase() !== \"svg\") return;\n\n    if (mode === Mode.CREATING_LINE_SEGMENT) {\n      if (firstPoint === null) {\n        setFirstPoint({\n          x: e.clientX,\n          y: e.clientY,\n        });\n\n        canvasRef.current.appendChild(\n          createCircleElement(e.clientX, e.clientY)\n        );\n      } else {\n        setFirstPoint(null);\n\n        // True if e.clientX/e.clientY describes x1\n        // x1 is the point with the smaller x coordinate\n        const newPoint = e.clientX < firstPoint.x;\n\n        const line = {\n          x1: newPoint ? e.clientX : firstPoint.x,\n          y1: newPoint ? e.clientY : firstPoint.y,\n          x2: !newPoint ? e.clientX : firstPoint.x,\n          y2: !newPoint ? e.clientY : firstPoint.y,\n        };\n\n        setLines(lines.concat(line));\n\n        canvasRef.current.appendChild(createLineElement(line));\n        canvasRef.current.appendChild(\n          createCircleElement(e.clientX, e.clientY)\n        );\n      }\n    } else if (mode === Mode.SHOOTING_RAY) {\n    }\n  };\n\n  const handleMouseMove = (e) => {\n    if (mode !== Mode.SHOOTING_RAY || tree === undefined) {\n      return;\n    }\n\n    if (document.getElementById(\"ray\") !== null) {\n      document.getElementById(\"ray\").remove();\n    }\n\n    const elem = tree.shootVerticalRay(\n      e.clientX,\n      window.innerHeight - e.clientY\n    );\n    // console.log(elem);\n\n    if (elem === null || elem.element === undefined) {\n      return;\n    }\n\n    const { startX, startY, endX, endY } = elem.element;\n    const topRayY =\n      startY + ((endY - startY) / (endX - startX)) * (e.clientX - startX);\n\n    canvasRef.current.appendChild(\n      createLineElement(\n        {\n          x1: e.clientX,\n          y1: e.clientY,\n          x2: e.clientX,\n          y2: window.innerHeight - topRayY,\n        },\n        \"ray\"\n      )\n    );\n  };\n\n  return (\n    <div className=\"App\" onClick={handleClick}>\n      <div className=\"vertical-lines\" />\n      <div className=\"horizontal-lines\" />\n      <div className=\"button-bar\">\n        <button\n          className={mode === Mode.CREATING_LINE_SEGMENT ? \"selected\" : \"\"}\n          onClick={() => setMode(Mode.CREATING_LINE_SEGMENT)}\n        >\n          <img src={plusIcon} alt=\"Create line segment\" />\n          <p>Create line segment</p>\n        </button>\n        <button\n          className={mode === Mode.SHOOTING_RAY ? \"selected\" : \"\"}\n          onClick={() => {\n            if (lines.length === 0) {\n              return;\n            }\n\n            setTree(buildTree(lines));\n            setMode(Mode.SHOOTING_RAY);\n          }}\n        >\n          <img src={rayIcon} alt=\"Shoot vertical ray\" />\n          <p>Shoot vertical ray</p>\n        </button>\n        <button\n          onClick={() => {\n            while (canvasRef.current.firstChild) {\n              canvasRef.current.removeChild(canvasRef.current.firstChild);\n            }\n\n            // const lines = [\n            //   { x1: 100, y1: 100, x2: 300, y2: 100 },\n            //   { x1: 99, y1: 100, x2: 100, y2: 150 },\n            //   { x1: 101, y1: 150, x2: 299, y2: 150 },\n            //   { x1: 301, y1: 100, x2: 302, y2: 150 },\n\n            // ];\n            const lines = [\n              {\"x1\":598,\"y1\":308,\"x2\":825,\"y2\":179},\n              {\"x1\":539,\"y1\":202,\"x2\":794,\"y2\":322},\n              {\"x1\":541,\"y1\":213,\"x2\":584,\"y2\":434},\n              {\"x1\":504,\"y1\":381,\"x2\":654,\"y2\":206},\n              {\"x1\":517,\"y1\":309,\"x2\":786,\"y2\":313},\n            ];\n\n            lines.forEach((line) => {\n              canvasRef.current.appendChild(createLineElement(line));\n              canvasRef.current.appendChild(\n                createCircleElement(line.x1, line.y1)\n              );\n              canvasRef.current.appendChild(\n                createCircleElement(line.x2, line.y2)\n              );\n            });\n\n            setLines(lines);\n            setTree(buildTree(lines));\n            setMode(Mode.SHOOTING_RAY);\n          }}\n        >\n          <img src={wrenchIcon} alt=\"Create user interface\" />\n          <p>Create user interface</p>\n        </button>\n        <button\n          onClick={() => {\n            var textarea = document.createElement(\"textarea\");\n            document.body.appendChild(textarea);\n            textarea.value = JSON.stringify(lines);\n            textarea.select();\n            document.execCommand(\"copy\");\n            document.body.removeChild(textarea);\n          }}\n        >\n          <img src={clipboardIcon} alt=\"Copy lines to clipboard\" />\n          <p>Copy lines to clipboard</p>\n        </button>\n      </div>\n      <svg\n        ref={canvasRef}\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onMouseMove={handleMouseMove}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}