{"version":3,"sources":["mode.js","PersistentAVLTree.js","img/plus.svg","img/ray.svg","App.js","reportWebVitals.js","index.js"],"names":["modes","NONE","CREATING_LINE_SEGMENT","SHOOTING_RAY","getHeight","node","height","getBalance","right","left","Node","element","this","id","Math","random","sortLeftToRight","a","b","updateHeight","max","copyNode","newNode","og","copySubtree","PersistentAVLTree","comparisonFunc","_compare","current","versions","push","version","length","tree","_search","path","getMin","i","versionTree","getVersion","tempTree","_insert","successor","getSuccessor","prototype","search","direction","insert","balance","subLeftDirection","_rightRotate","_leftRotate","subRightDirection","l","lr","r","rl","delete","_delete","parent","oldNode","detachedMax","_deleteMax","_balance","deleteMax","getMax","newRoot","x","y","z","_getTallestSubtree","_triNodeRestructure","c","forEach","func","_forEach","getElementsAtDepth","targetDepth","foundNodes","_getElementsAtDepth","App","useState","Mode","mode","setMode","firstPoint","setFirstPoint","lines","setLines","setTree","canvasRef","useRef","buildTree","useCallback","sortedLines","sort","first","second","x1","reverseSortedLines","x2","lineIdx","reverseLineIdx","window","innerWidth","innerHeight","y1","step","createLineElement","line","elem","document","createElementNS","setAttribute","y2","createCircleElement","className","onClick","e","target","tagName","toLowerCase","clientX","clientY","appendChild","newPoint","concat","console","log","shootVerticalRay","src","plusIcon","alt","rayIcon","ref","width","onMouseMove","getElementById","remove","find","undefined","topRayY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f49627b5.chunk.js","sourcesContent":["const modes = {\n  NONE: 0,\n  CREATING_LINE_SEGMENT: 1,\n  SHOOTING_RAY: 2\n};\n\nexport default modes;","function getHeight(node) {\n  if (node === null) {\n    return 0;\n  }\n  return node.height;\n}\n\nfunction getBalance(node) {\n  if (node === null) {\n    return 0;\n  }\n\n  return getHeight(node.right) - getHeight(node.left);\n}\n\nfunction Node(element) {\n  this.element = element;\n  this.height = 1;\n  this.left = null;\n  this.right = null;\n  this.id = Math.random();\n}\n\nfunction sortLeftToRight(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction updateHeight(node) {\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n}\n\nfunction copyNode(node) {\n  const newNode = new Node(node.element);\n  newNode.left = node.left;\n  newNode.right = node.right;\n  newNode.height = node.height;\n  newNode.og = node;\n  //console.log(\"copying: \", node, newNode);\n  return newNode;\n}\n\nfunction copySubtree(node) {\n  if (node === null) {\n    return null;\n  }\n  //console.log(\"copyign subtree\", node.element);\n  const newNode = copyNode(node);\n  newNode.left = copySubtree(node.left);\n  newNode.right = copySubtree(node.right);\n  return newNode;\n}\n\nexport class PersistentAVLTree {\n  constructor(comparisonFunc) {\n    if (typeof comparisonFunc === \"function\") {\n      this._compare = comparisonFunc;\n    } else {\n      this._compare = sortLeftToRight;\n    }\n    this.current = null;\n    this.versions = [];\n  }\n\n  step() {\n    this.versions.push(this.current);\n  }\n\n  getVersion(version) {\n    return version < this.versions.length ? this.versions[version] : null;\n  }\n\n  getSuccessor(element, tree) {\n    const { node, path } = this._search(element, tree);\n    // console.log(node, path);\n    if (node === null) {\n      return null;\n    }\n    if (node.right) {\n      return this.getMin(node.right);\n    } else {\n      for (let i = path.length - 2; i >= 0; i--) {\n        if (path[i].left === path[i + 1]) {\n          return path[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  shootVerticalRay(version, element) {\n    const versionTree = this.getVersion(version);\n    if (versionTree === null) {\n      // console.log(\"INVALID VERSION\");\n      return null;\n    }\n    const tempTree = this._insert(element, versionTree);\n    const successor = this.getSuccessor(element, tempTree);\n    return successor !== null ? successor : true;\n  }\n}\n\n// TODO: put data on the node.\nPersistentAVLTree.prototype.search = function (element) {\n  var { node } = this._search(element, this.current);\n  return node ? node.element : null;\n};\n\nPersistentAVLTree.prototype._search = function (element, node, path = []) {\n  if (node === null) {\n    return { node, path };\n  }\n  path.push(node);\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    return this._search(element, node.left, path);\n  } else if (direction > 0) {\n    return this._search(element, node.right, path);\n  }\n  return { node, path };\n};\n\nPersistentAVLTree.prototype.insert = function (element) {\n  //console.log(\"inserting \", element);\n  this.current = this._insert(element, this.current);\n};\n\nPersistentAVLTree.prototype._insert = function (element, node) {\n  if (node === null) {\n    const newNode = new Node(element);\n    return newNode;\n  }\n  node = copyNode(node);\n\n  // just copy here, propagate to children\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    node.left = this._insert(element, node.left);\n  } else if (direction > 0) {\n    node.right = this._insert(element, node.right);\n  }\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n\n  var balance = getBalance(node);\n\n  if (balance < -1) {\n    var subLeftDirection = this._compare(element, node.left.element);\n    if (subLeftDirection < 0) {\n      return copySubtree(this._rightRotate(node));\n    } else if (subLeftDirection > 0) {\n      node.left = this._leftRotate(node.left);\n      return copySubtree(this._rightRotate(node));\n    }\n  } else if (balance > 1) {\n    var subRightDirection = this._compare(element, node.right.element);\n    if (subRightDirection > 0) {\n      return copySubtree(this._leftRotate(node));\n    } else if (subRightDirection < 0) {\n      node.right = this._rightRotate(node.right);\n      return copySubtree(this._leftRotate(node));\n    }\n  }\n  return node;\n};\n\nPersistentAVLTree.prototype._rightRotate = function (node) {\n  var l = node.left;\n  var lr = l.right;\n  l.right = node;\n  node.left = lr;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  l.height = Math.max(getHeight(l.left), getHeight(l.right)) + 1;\n  return l;\n};\n\nPersistentAVLTree.prototype._leftRotate = function (node) {\n  var r = node.right;\n  var rl = r.left;\n  r.left = node;\n  node.right = rl;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  r.height = Math.max(getHeight(r.left), getHeight(r.right)) + 1;\n  return r;\n};\n\nPersistentAVLTree.prototype.delete = function (element) {\n  //console.log(\"deleting \", element, this.current);\n  if (this.current !== null) {\n    this.current = this._delete(element, this.current, null);\n  }\n};\n\nPersistentAVLTree.prototype._delete = function (element, node, parent) {\n  //console.log(\"DELETE: \", element, node, parent);\n  if (node === null) {\n    return null;\n  }\n  const oldNode = node;\n  node = copyNode(node);\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    // go left\n    if (this._compare(element, node.left.element) === 0) {\n      this._delete(element, node.left, node);\n    } else {\n      node.left = this._delete(element, node.left, node);\n    }\n  } else if (direction > 0) {\n    // go right\n    if (this._compare(element, node.right.element) === 0) {\n      this._delete(element, node.right, node);\n    } else {\n      this._delete(element, node.right, node);\n    }\n  } else if (node.left !== null && node.right !== null) {\n    // found our target element\n    var detachedMax = this._deleteMax(node.left, node);\n    node.element = detachedMax.element; // TODO: if we end up adding data to nodes, copy it here\n  } else if (node.left === null) {\n    if (node.right === null) {\n      //console.log(\"both children empty\", node, parent);\n      // both children are empty\n      if (parent === null) {\n        return null;\n      }\n      if (parent.right === oldNode) {\n        //console.log(\"setting right to null\");\n        parent.right = null;\n        //console.log(parent);\n      } else {\n        //console.log(\"setting left to null\");\n        parent.left = null;\n      }\n    } else {\n      // only has right\n      if (parent === null) {\n        return node.right;\n      }\n      if (parent.right === oldNode) {\n        parent.right = node.right;\n      } else {\n        parent.left = node.right;\n      }\n\n      node.right = null;\n    }\n  } else {\n    // only has left\n    if (parent === null) {\n      return node.left;\n    }\n    if (parent.right === oldNode) {\n      parent.right = node.left;\n    } else {\n      parent.left = node.left;\n    }\n\n    node.left = null;\n  }\n\n  return this._balance(node, parent); // backtrack and balance everyone\n};\n\nPersistentAVLTree.prototype.deleteMax = function () {\n  return this._deleteMax(this.current, null).element;\n};\n\nPersistentAVLTree.prototype._deleteMax = function (node, parent) {\n  var max;\n  if (node.right === null) {\n    // max found\n    max = this._delete(node.element, node, parent);\n    this._balance(node, parent);\n    return max;\n  } // not yet at max, keep going\n  max = this._deleteMax(node.right, node);\n  this._balance(node, parent); // backtrack and balance everyone in the left sub tree\n  return max;\n};\n\nPersistentAVLTree.prototype.getMin = function (node) {\n  if (node.left === null) {\n    return node;\n  }\n  return this.getMin(node.left);\n};\n\nPersistentAVLTree.prototype.getMax = function (node) {\n  if (node.right === null) {\n    return node;\n  }\n  return this.getMax(node.right);\n};\n\nPersistentAVLTree.prototype._balance = function (node, parent) {\n  // node = copySubtree(node);\n  updateHeight(node);\n  var balance = getBalance(node);\n  var newRoot, x, y, z;\n  if (balance < -1) {\n    node = copySubtree(node);\n    //console.log(\"balance < -1\");\n    z = node;\n    y = node.left;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  } else if (balance > 1) {\n    node = copySubtree(node);\n    //console.log(\"balance > 1\");\n    z = node;\n    y = node.right;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  } else {\n    //console.log(\"no balance needed\");\n  }\n  updateHeight(node);\n  return node;\n};\n\nPersistentAVLTree.prototype._getTallestSubtree = function (node) {\n  var balance = getBalance(node);\n  if (balance < 0) {\n    return node.left;\n  }\n  return node.right;\n};\n\nPersistentAVLTree.prototype._triNodeRestructure = function (x, y, z, parent) {\n  //console.log(x, y, z, parent, this.current);\n  var a, b, c;\n  if (z.right === y && y.left === x) {\n    a = z;\n    b = x;\n    c = y;\n  }\n  if (z.right === y && y.right === x) {\n    a = z;\n    b = y;\n    c = x;\n  }\n  if (z.left === y && y.left === x) {\n    a = x;\n    b = y;\n    c = z;\n  }\n  if (z.left === y && y.right === x) {\n    a = y;\n    b = x;\n    c = z;\n  }\n  if (\n    z.og === this.current ||\n    z === this.current ||\n    z.element === this.current.element // TODO: THIS IS JANK\n  ) {\n    this.current = b;\n  } else if (parent.left === z) {\n    parent.left = b;\n  } else {\n    parent.right = b;\n  }\n  if (b.left !== x && b.left !== y && b.left !== z) {\n    a.right = b.left;\n  }\n  if (b.right !== x && b.right !== y && b.right !== z) {\n    c.left = b.right;\n  }\n  b.left = a;\n  b.right = c;\n  return b;\n};\n\nPersistentAVLTree.prototype.forEach = function (func) {\n  this._forEach(this.current, func);\n};\n\nPersistentAVLTree.prototype._forEach = function (node, func) {\n  if (node !== null) {\n    this._forEach(node.left, func);\n    func(node.element);\n    this._forEach(node.right, func);\n  }\n};\n\nPersistentAVLTree.prototype.getElementsAtDepth = function (targetDepth) {\n  var foundNodes = [];\n  this._getElementsAtDepth(targetDepth, 0, this.current, foundNodes);\n  return foundNodes;\n};\n\nPersistentAVLTree.prototype._getElementsAtDepth = function (\n  targetDepth,\n  current,\n  node,\n  foundNodes\n) {\n  if (node === null) {\n    return;\n  }\n  if (targetDepth === current) {\n    foundNodes.push(node.element);\n    return;\n  }\n  this._getElementsAtDepth(targetDepth, current + 1, node.left, foundNodes);\n  this._getElementsAtDepth(targetDepth, current + 1, node.right, foundNodes);\n};\n\n// module.exports = AvlTree;\n","export default __webpack_public_path__ + \"static/media/plus.18e46bbf.svg\";","export default __webpack_public_path__ + \"static/media/ray.86b55e34.svg\";","import React, { useCallback, useRef, useState } from \"react\";\nimport Mode from \"./mode\";\nimport \"./App.scss\";\nimport { PersistentAVLTree } from \"./PersistentAVLTree\";\n\nimport plusIcon from \"./img/plus.svg\";\nimport rayIcon from \"./img/ray.svg\";\n\nconst App = () => {\n  const [mode, setMode] = useState(Mode.CREATING_LINE_SEGMENT);\n  const [firstPoint, setFirstPoint] = useState(null);\n  const [lines, setLines] = useState([]);\n  const [tree, setTree] = useState(new PersistentAVLTree());\n\n  const canvasRef = useRef(null);\n\n  const buildTree = useCallback(() => {\n    if (lines.length === 0) {\n      return;\n    }\n\n    const tree = new PersistentAVLTree();\n    const dx = 1;\n\n    // TODO: Need to make sure that x coordinates are distinct\n    const sortedLines = [...lines];\n    sortedLines.sort((first, second) => {\n      if (first.x1 < second.x1) {\n        return -1;\n      } else if (first.x1 > second.x1) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    const reverseSortedLines = [...lines];\n    reverseSortedLines.sort((first, second) => {\n      if (first.x2 < second.x2) {\n        return -1;\n      } else if (first.x2 > second.x2) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    // Build AVL tree\n    let lineIdx = 0;\n    let reverseLineIdx = 0;\n\n    for (let i = 0; i < window.innerWidth; i += dx) {\n      if (lineIdx < lines.length && sortedLines[lineIdx].x1 <= i) {\n        tree.insert(window.innerHeight - sortedLines[lineIdx].y1);\n        lineIdx++;\n      }\n\n      if (reverseLineIdx < lines.length && reverseSortedLines[reverseLineIdx].x2 <= i) {\n        tree.delete(window.innerHeight - reverseSortedLines[reverseLineIdx].y1);\n        reverseLineIdx++;\n      }\n\n      tree.step();\n    }\n\n    return tree;\n  }, [lines]);\n\n  const createLineElement = (line, id = null) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    elem.setAttribute(\"x1\", line.x1);\n    elem.setAttribute(\"y1\", line.y1);\n    elem.setAttribute(\"x2\", line.x2);\n    elem.setAttribute(\"y2\", line.y2);\n\n    if (id !== null) {\n      elem.setAttribute(\"id\", id);\n    }\n\n    return elem;\n  };\n\n  const createCircleElement = (x, y, r = 4) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n    elem.setAttribute(\"cx\", x);\n    elem.setAttribute(\"cy\", y);\n    elem.setAttribute(\"r\", r);\n    return elem;\n  };\n\n  const handleClick = (e) => {\n    if (e.target.tagName.toLowerCase() !== \"svg\") return;\n\n    if (mode === Mode.CREATING_LINE_SEGMENT) {\n      if (firstPoint === null) {\n        setFirstPoint({\n          x: e.clientX,\n          y: e.clientY,\n        });\n\n        canvasRef.current.appendChild(createCircleElement(e.clientX, e.clientY));\n      } else {\n        setFirstPoint(null);\n\n        // True if e.clientX/e.clientY describes x1\n        // x1 is the point with the smaller x coordinate\n        const newPoint = e.clientX < firstPoint.x;\n\n        const line = {\n          x1: newPoint ? e.clientX : firstPoint.x,\n          y1: newPoint ? e.clientY : firstPoint.y,\n          x2: !newPoint ? e.clientX : firstPoint.x,\n          y2: !newPoint ? e.clientY : firstPoint.y,\n        };\n\n        setLines(lines.concat(line));\n\n        canvasRef.current.appendChild(createLineElement(line));\n        canvasRef.current.appendChild(createCircleElement(line.x2, line.y2));\n      }\n    } else if (mode === Mode.SHOOTING_RAY) {\n      console.log(tree.shootVerticalRay(e.clientX, window.innerHeight - e.clientY));\n    }\n  };\n\n  const handleMouseMove = (e) => {\n    if (mode !== Mode.SHOOTING_RAY) {\n      return;\n    }\n\n    if (document.getElementById(\"ray\") !== null) {\n      document.getElementById(\"ray\").remove();\n    }\n\n    const elem = tree.shootVerticalRay(e.clientX, window.innerHeight - e.clientY);\n\n    if (elem === null) {\n      return;\n    }\n\n    const line = lines.find((x) => window.innerHeight - x.y1 === elem.element);\n\n    if (line === undefined) {\n      return;\n    }\n\n    const topRayY = line.y1 + (line.y2 - line.y1) / (line.x2 - line.x1) * (e.clientX - line.x1);\n\n    canvasRef.current.appendChild(createLineElement({\n      x1: e.clientX,\n      y1: e.clientY,\n      x2: e.clientX,\n      y2: topRayY\n    }, \"ray\"));\n  };\n\n  return (\n    <div className=\"App\" onClick={handleClick}>\n      <div className=\"vertical-lines\" />\n      <div className=\"horizontal-lines\" />\n      <div className=\"button-bar\">\n        <button\n          className={mode === Mode.CREATING_LINE_SEGMENT ? \"selected\" : \"\"}\n          onClick={() => setMode(Mode.CREATING_LINE_SEGMENT)}\n        >\n          <img src={plusIcon} alt=\"Create line segment\" />\n          <p>Create line segment</p>\n        </button>\n        <button\n          className={mode === Mode.SHOOTING_RAY ? \"selected\" : \"\"}\n          onClick={() => {\n            if (lines.length === 0) {\n              return;\n            }\n\n            setTree(buildTree());\n            setMode(Mode.SHOOTING_RAY);\n          }}\n        >\n          <img src={rayIcon} alt=\"Shoot vertical ray\" />\n          <p>Shoot vertical ray</p>\n        </button>\n      </div>\n      <svg ref={canvasRef} width={window.innerWidth} height={window.innerHeight} onMouseMove={handleMouseMove} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}