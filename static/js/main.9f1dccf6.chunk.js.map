{"version":3,"sources":["mode.js","AVLTree.js","img/plus.svg","App.js","reportWebVitals.js","index.js"],"names":["modes","NONE","CREATING_LINE_SEGMENT","getHeight","node","height","getBalance","right","left","Node","element","this","sortLeftToRight","a","b","updateHeight","Math","max","AvlTree","comparisonFunc","_compare","_root","prototype","search","_search","direction","insert","_insert","balance","subLeftDirection","_rightRotate","_leftRotate","subRightDirection","l","lr","r","rl","delete","_delete","parent","detachedMax","_deleteMax","_balance","deleteMax","getMin","getMax","newRoot","x","y","z","_getTallestSubtree","_triNodeRestructure","c","forEach","func","_forEach","getElementsAtDepth","targetDepth","foundNodes","_getElementsAtDepth","current","push","App","useState","mode","setMode","firstPoint","setFirstPoint","lines","setLines","length","tree","AVLTree","sortedLines","sort","first","second","x1","reverseSortedLines","x2","lineIdx","reverseLineIdx","i","window","innerWidth","buildTree","className","onClick","e","target","tagName","toLowerCase","Mode","clientX","clientY","newPoint","concat","y1","y2","src","plusIcon","alt","width","innerHeight","cx","cy","map","line","idx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f1dccf6.chunk.js","sourcesContent":["const modes = {\n  NONE: 0,\n  CREATING_LINE_SEGMENT: 1\n};\n\nexport default modes;","function getHeight(node) {\n  if (node === null) {\n    return 0;\n  }\n  return node.height;\n}\n\nfunction getBalance(node) {\n  if (node === null) {\n    return 0;\n  }\n\n  return getHeight(node.right) - getHeight(node.left);\n}\n\nfunction Node(element) {\n  this.element = element;\n  this.height = 1;\n  this.left = null;\n  this.right = null;\n}\n\nfunction sortLeftToRight(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction updateHeight(node) {\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n}\n\nexport default class AvlTree {\n  constructor(comparisonFunc) {\n    if (typeof comparisonFunc === \"function\") {\n      this._compare = comparisonFunc;\n    } else {\n      this._compare = sortLeftToRight;\n    }\n    this._root = null;\n  }\n}\n\n// TODO: put data on the node.\nAvlTree.prototype.search = function (element) {\n  var node = this._search(element, this._root);\n  return node ? node.element : null;\n};\n\nAvlTree.prototype._search = function (element, node) {\n  if (node === null) {\n    return null;\n  }\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    return this._search(element, node.left);\n  } else if (direction > 0) {\n    return this._search(element, node.right);\n  }\n  return node;\n};\n\nAvlTree.prototype.insert = function (element) {\n  this._root = this._insert(element, this._root);\n};\n\nAvlTree.prototype._insert = function (element, node) {\n  if (node === null) {\n    return new Node(element);\n  }\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    node.left = this._insert(element, node.left);\n  } else if (direction > 0) {\n    node.right = this._insert(element, node.right);\n  }\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n\n  var balance = getBalance(node);\n\n  if (balance < -1) {\n    var subLeftDirection = this._compare(element, node.left.element);\n    if (subLeftDirection < 0) {\n      return this._rightRotate(node);\n    } else if (subLeftDirection > 0) {\n      node.left = this._leftRotate(node.left);\n      return this._rightRotate(node);\n    }\n  } else if (balance > 1) {\n    var subRightDirection = this._compare(element, node.right.element);\n    if (subRightDirection > 0) {\n      return this._leftRotate(node);\n    } else if (subRightDirection < 0) {\n      node.right = this._rightRotate(node.right);\n      return this._leftRotate(node);\n    }\n  }\n  return node;\n};\n\nAvlTree.prototype._rightRotate = function (node) {\n  var l = node.left;\n  var lr = l.right;\n  l.right = node;\n  node.left = lr;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  l.height = Math.max(getHeight(l.left), getHeight(l.right)) + 1;\n  return l;\n};\n\nAvlTree.prototype._leftRotate = function (node) {\n  var r = node.right;\n  var rl = r.left;\n  r.left = node;\n  node.right = rl;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  r.height = Math.max(getHeight(r.left), getHeight(r.right)) + 1;\n  return r;\n};\n\nAvlTree.prototype.delete = function (element) {\n  if (this._root !== null) {\n    this._root = this._delete(element, this._root, null);\n  }\n};\n\nAvlTree.prototype._delete = function (element, node, parent) {\n  if (node === null) {\n    return null;\n  }\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    // go left\n    this._delete(element, node.left, node);\n  } else if (direction > 0) {\n    // go right\n    this._delete(element, node.right, node);\n  } else if (node.left !== null && node.right !== null) {\n    // found our target element\n    var detachedMax = this._deleteMax(node.left, node);\n    node.element = detachedMax.element; // TODO: if we end up adding data to nodes, copy it here\n  } else if (node.left === null) {\n    if (node.right === null) {\n      // both children are empty\n      if (parent === null) {\n        return null;\n      }\n      if (parent.right === node) {\n        parent.right = null;\n      } else {\n        parent.left = null;\n      }\n    } else {\n      // only has right\n      if (parent === null) {\n        return node.right;\n      }\n      if (parent.right === node) {\n        parent.right = node.right;\n      } else {\n        parent.left = node.right;\n      }\n\n      node.right = null;\n    }\n  } else {\n    // only has left\n    if (parent === null) {\n      return node.left;\n    }\n    if (parent.right === node) {\n      parent.right = node.left;\n    } else {\n      parent.left = node.left;\n    }\n\n    node.left = null;\n  }\n\n  return this._balance(node, parent); // backtrack and balance everyone\n};\n\nAvlTree.prototype.deleteMax = function () {\n  return this._deleteMax(this._root, null).element;\n};\n\nAvlTree.prototype._deleteMax = function (node, parent) {\n  var max;\n  if (node.right === null) {\n    // max found\n    max = this._delete(node.element, node, parent);\n    this._balance(node, parent);\n    return max;\n  } // not yet at max, keep going\n  max = this._deleteMax(node.right, node);\n  this._balance(node, parent); // backtrack and balance everyone in the left sub tree\n  return max;\n};\n\nAvlTree.prototype.getMin = function (node) {\n  if (node.left === null) {\n    return node;\n  }\n  return this.getMin(node.left);\n};\n\nAvlTree.prototype.getMax = function (node) {\n  if (node.right === null) {\n    return node;\n  }\n  return this.getMax(node.right);\n};\n\nAvlTree.prototype._balance = function (node, parent) {\n  updateHeight(node);\n  var balance = getBalance(node);\n  var newRoot, x, y, z;\n  if (balance < -1) {\n    z = node;\n    y = node.left;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  } else if (balance > 1) {\n    z = node;\n    y = node.right;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  }\n  updateHeight(node);\n  return node;\n};\n\nAvlTree.prototype._getTallestSubtree = function (node) {\n  var balance = getBalance(node);\n  if (balance < 0) {\n    return node.left;\n  }\n  return node.right;\n};\n\nAvlTree.prototype._triNodeRestructure = function (x, y, z, parent) {\n  var a, b, c;\n  if (z.right === y && y.left === x) {\n    a = z;\n    b = x;\n    c = y;\n  }\n  if (z.right === y && y.right === x) {\n    a = z;\n    b = y;\n    c = x;\n  }\n  if (z.left === y && y.left === x) {\n    a = x;\n    b = y;\n    c = z;\n  }\n  if (z.left === y && y.right === x) {\n    a = y;\n    b = x;\n    c = z;\n  }\n  if (z === this._root) {\n    this._root = b;\n  } else if (parent.left === z) {\n    parent.left = b;\n  } else {\n    parent.right = b;\n  }\n  if (b.left !== x && b.left !== y && b.left !== z) {\n    a.right = b.left;\n  }\n  if (b.right !== x && b.right !== y && b.right !== z) {\n    c.left = b.right;\n  }\n  b.left = a;\n  b.right = c;\n  return b;\n};\n\nAvlTree.prototype.forEach = function (func) {\n  this._forEach(this._root, func);\n};\n\nAvlTree.prototype._forEach = function (node, func) {\n  if (node !== null) {\n    this._forEach(node.left, func);\n    func(node.element);\n    this._forEach(node.right, func);\n  }\n};\n\nAvlTree.prototype.getElementsAtDepth = function (targetDepth) {\n  var foundNodes = [];\n  this._getElementsAtDepth(targetDepth, 0, this._root, foundNodes);\n  return foundNodes;\n};\n\nAvlTree.prototype._getElementsAtDepth = function (\n  targetDepth,\n  current,\n  node,\n  foundNodes\n) {\n  if (node === null) {\n    return;\n  }\n  if (targetDepth === current) {\n    foundNodes.push(node.element);\n    return;\n  }\n  this._getElementsAtDepth(targetDepth, current + 1, node.left, foundNodes);\n  this._getElementsAtDepth(targetDepth, current + 1, node.right, foundNodes);\n};\n\n// module.exports = AvlTree;\n","export default __webpack_public_path__ + \"static/media/plus.18e46bbf.svg\";","import React, { Fragment, useState } from \"react\";\nimport Mode from \"./mode\";\nimport \"./App.scss\";\nimport AVLTree from \"./AVLTree\";\nimport plusIcon from './img/plus.svg';\n\nconst App = () => {\n  const [mode, setMode] = useState(0);\n  const [firstPoint, setFirstPoint] = useState(null);\n  const [lines, setLines] = useState([]);\n\n  const handleClick = (e) => {\n    if (e.target.tagName.toLowerCase() !== \"svg\") return;\n\n    if (mode === Mode.CREATING_LINE_SEGMENT) {\n      if (firstPoint === null) {\n        setFirstPoint({\n          x: e.clientX,\n          y: e.clientY,\n        });\n      } else {\n        setMode(Mode.NONE);\n        setFirstPoint(null);\n\n        // True if e.clientX/e.clientY describes x1\n        // x1 is the point with the smaller x coordinate\n        const newPoint = e.clientX < firstPoint.x;\n\n        setLines(\n          lines.concat({\n            x1: newPoint ? e.clientX : firstPoint.x,\n            y1: newPoint ? e.clientY : firstPoint.y,\n            x2: !newPoint ? e.clientX : firstPoint.x,\n            y2: !newPoint ? e.clientY : firstPoint.y,\n          })\n        );\n      }\n    }\n  };\n\n  const buildTree = () => {\n    if (lines.length === 0) {\n      return;\n    }\n\n    const dx = 1;\n    const tree = new AVLTree();\n\n    // TODO: Need to make sure that x coordinates are distinct\n    const sortedLines = [...lines];\n    sortedLines.sort((first, second) => {\n      if (first.x1 < second.x1) {\n        return -1;\n      } else if (first.x1 > second.x1) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    const reverseSortedLines = [...lines];\n    reverseSortedLines.sort((first, second) => {\n      if (first.x2 < second.x2) {\n        return -1;\n      } else if (first.x2 > second.x2) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    // Build AVL tree\n    let lineIdx = 0;\n    let reverseLineIdx = lines.length - 1;\n\n    for (let i = 0; i < window.innerWidth; i += dx) {\n      if (lineIdx < lines.length && sortedLines[lineIdx].x1 <= i) {\n        tree.insert(lineIdx);\n        lineIdx++;\n      }\n\n      if (reverseLineIdx >= 0 && reverseSortedLines[reverseLineIdx].x2 <= i) {\n        tree.delete(reverseLineIdx);\n        reverseLineIdx--;\n      }\n      \n      // TODO: Save the current AVL tree\n    }\n  };\n\n  buildTree();\n\n  return (\n    <div className=\"App\" onClick={handleClick}>\n      <div className=\"vertical-lines\" />\n      <div className=\"horizontal-lines\" />\n      <div className=\"button-bar\">\n        <button\n          className={mode === Mode.CREATING_LINE_SEGMENT ? 'selected' : ''}\n          onClick={() => setMode(Mode.CREATING_LINE_SEGMENT)}\n        >\n          <img src={plusIcon} alt=\"Create line segment\" />\n          <p>Create line segment</p>\n        </button>\n      </div>\n      <svg width={window.innerWidth} height={window.innerHeight}>\n        {firstPoint !== null ? (\n          <circle cx={firstPoint.x} cy={firstPoint.y} r={4} />\n        ) : null}\n        {lines.map((line, idx) => (\n          <Fragment key={idx}>\n            <circle cx={line.x1} cy={line.y1} r={4} />\n            <circle cx={line.x2} cy={line.y2} r={4} />\n            <line\n              key={idx}\n              x1={line.x1}\n              y1={line.y1}\n              x2={line.x2}\n              y2={line.y2}\n            />\n          </Fragment>\n        ))}\n      </svg>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}