{"version":3,"sources":["mode.js","PersistentAVLTree.js","eventType.js","img/plus.svg","img/ray.svg","img/wrench.svg","priorityQueue.js","App.js","reportWebVitals.js","index.js"],"names":["modes","NONE","CREATING_LINE_SEGMENT","SHOOTING_RAY","getHeight","node","height","getBalance","right","left","Line","startX","startY","endX","endY","this","Node","element","id","Math","random","updateHeight","max","copyNode","newNode","og","copySubtree","PersistentAVLTree","comparisonFunc","_compare","sortLeftToRight","current","versions","currVersionNum","a","b","x","undefined","console","log","aCurrY","bCurrY","push","version","length","tree","_search","path","getMin","i","getMax","versionTree","getVersion","tempTree","_insert","successor","getSuccessor","node1","node2","tmp","prototype","search","direction","insert","balance","subLeftDirection","_rightRotate","_leftRotate","subRightDirection","l","lr","r","rl","delete","_delete","parent","oldNode","detachedMax","_deleteMax","_balance","deleteMax","newRoot","y","z","_getTallestSubtree","_triNodeRestructure","c","forEach","func","_forEach","getElementsAtDepth","targetDepth","foundNodes","_getElementsAtDepth","eventType","START","END","CROSS","PriorityQueue","leftChild","index","rightChild","floor","peek","heap","swap","indexOne","indexTwo","idx","val","extractMin","root","shift","unshift","pop","heapify","largest","App","useState","Mode","mode","setMode","firstPoint","setFirstPoint","lines","setLines","setTree","canvasRef","useRef","buildTree","queue","line","EventType","x1","shouldInsert","x2","step","evt","y1","y2","window","innerHeight","predecessor","getPredecessor","processIntersection","cmp","x3","y3","x4","y4","onSegment","p","q","min","intersectionX","intersectionY","line1","line2","intX","intY","ceil","innerWidth","createLineElement","elem","document","createElementNS","setAttribute","createCircleElement","className","onClick","e","target","tagName","toLowerCase","clientX","clientY","appendChild","newPoint","concat","src","plusIcon","alt","rayIcon","firstChild","removeChild","wrenchIcon","ref","width","onMouseMove","getElementById","remove","shootVerticalRay","topRayY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e120b86d.chunk.js","sourcesContent":["const modes = {\n  NONE: 0,\n  CREATING_LINE_SEGMENT: 1,\n  SHOOTING_RAY: 2\n};\n\nexport default modes;","function getHeight(node) {\n  if (node === null) {\n    return 0;\n  }\n  return node.height;\n}\n\nfunction getBalance(node) {\n  if (node === null) {\n    return 0;\n  }\n\n  return getHeight(node.right) - getHeight(node.left);\n}\n\nexport class Line {\n  startX;\n  startY;\n  endX;\n  endY;\n\n  constructor(startX, startY, endX, endY) {\n    this.startX = startX;\n    this.startY = startY;\n    this.endX = endX;\n    this.endY = endY;\n  }\n}\n\nfunction Node(element) {\n  this.element = element;\n  this.height = 1;\n  this.left = null;\n  this.right = null;\n  this.id = Math.random();\n}\n\n// function sortLeftToRight(a, b) {\n//   if (ptX < startX || ptX > endX) {\n//     throw \"Point not in range of line!\";\n//   }\n//   const slope = (endY - startY) / (endX - endY);\n//   const currY = startY + slope * (ptX - startX);\n//   return currY < ptY ? -1 : 1;\n\n//   if (a.startY < b.startY) {\n//     return -1;\n//   } else if (a.startY > b.startY) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\nfunction compPointToLine(ptX, ptY, line) {\n  const { startX, startY, endX, endY } = line;\n  if (ptX < startX || ptX > endX) {\n    throw \"Point not in range of line!\";\n  }\n  const slope = (endY - startY) / (endX - endY);\n  const currY = startY + slope * (ptX - startX);\n  return currY < ptY ? -1 : 1;\n}\n\nfunction updateHeight(node) {\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n}\n\nfunction copyNode(node) {\n  const newNode = new Node(node.element);\n  newNode.left = node.left;\n  newNode.right = node.right;\n  newNode.height = node.height;\n  newNode.og = node;\n  //console.log(\"copying: \", node, newNode);\n  return newNode;\n}\n\nexport function copySubtree(node) {\n  if (node === null) {\n    return null;\n  }\n  //console.log(\"copyign subtree\", node.element);\n  const newNode = copyNode(node);\n  newNode.left = copySubtree(node.left);\n  newNode.right = copySubtree(node.right);\n  return newNode;\n}\n\nexport class PersistentAVLTree {\n  constructor(comparisonFunc) {\n    if (typeof comparisonFunc === \"function\") {\n      this._compare = comparisonFunc;\n    } else {\n      this._compare = this.sortLeftToRight;\n    }\n    this.current = null;\n    this.versions = [];\n    this.currVersionNum = 0;\n  }\n\n  // make a different compare functino for comparing points\n  sortLeftToRight(a, b) {\n    let x;\n    if (a.endX === undefined && a.endY === undefined) {\n      x = a.startX;\n    } else {\n      if (\n        this.currVersionNum < a.startX ||\n        this.currVersionNum > a.endX ||\n        this.currVersionNum < b.startX ||\n        this.currVersionNum > b.endX\n      ) {\n        console.log(\"OUT OF RANGE FUCK\", this.currVersionNum, a, b);\n        // console.log(\"OUT OF RANGE FUCK\");\n        throw \"Point not in range of line!\";\n      }\n      x = this.currVersionNum;\n    }\n\n    const aCurrY =\n      a.endX === undefined && a.endY === undefined\n        ? a.startY\n        : a.startY +\n          ((a.endY - a.startY) / (a.endX - a.startX)) * (x - a.startX);\n    const bCurrY =\n      b.startY + ((b.endY - b.startY) / (b.endX - b.startX)) * (x - b.startX);\n\n    // console.log(x, aCurrY, bCurrY);\n    if (aCurrY < bCurrY) {\n      return -1;\n    } else if (aCurrY > bCurrY) {\n      return 1;\n    }\n    return 0;\n  }\n\n  step() {\n    this.versions.push(this.current);\n    this.currVersionNum += 1;\n    // console.log(this.current);\n  }\n\n  getVersion(version) {\n    return version < this.versions.length ? this.versions[version] : null;\n  }\n\n  getSuccessor(element, tree) {\n    const { node, path } = this._search(element, tree);\n    // console.log(node, path);\n    if (node === null || node === undefined) {\n      return null;\n    }\n    if (node.right) {\n      return this.getMin(node.right);\n    } else {\n      for (let i = path.length - 2; i >= 0; i--) {\n        if (path[i].left === path[i + 1]) {\n          return path[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  getPredecessor(element, tree) {\n    const { node, path } = this._search(element, tree);\n    // console.log(node, path);\n    if (node === null || node === undefined) {\n      return null;\n    }\n    if (node.left) {\n      return this.getMax(node.left);\n    } else {\n      for (let i = path.length - 2; i >= 0; i--) {\n        if (path[i].right === path[i + 1]) {\n          return path[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  shootVerticalRay(version, element) {\n    element = new Line(version, element);\n    // console.log(\"element:\", element);\n    const versionTree = this.getVersion(version);\n    if (versionTree === null) {\n      return null;\n    }\n    const tempTree = this._insert(element, versionTree);\n    // console.log(versionTree, element, tempTree);\n    const successor = this.getSuccessor(element, tempTree);\n    // console.log(\"SUCCESSOR: \", successor);\n    return successor !== null ? successor : true;\n  }\n\n  swap(node1, node2) {\n    const tmp = node1.element;\n    node1.element = node2.element;\n    node2.element = tmp;\n  }\n}\n\n// TODO: put data on the node.\nPersistentAVLTree.prototype.search = function (element) {\n  var { node } = this._search(element, this.current);\n  return node ? node.element : null;\n};\n\nPersistentAVLTree.prototype._search = function (element, node, path = []) {\n  if (node === null || node === undefined) {\n    return { node, path };\n  }\n\n  path.push(node);\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    return this._search(element, node.left, path);\n  } else if (direction > 0) {\n    return this._search(element, node.right, path);\n  }\n  return { node, path };\n};\n\nPersistentAVLTree.prototype.insert = function (element) {\n  console.log(\"inserting \", this.currVersionNum);\n  console.log(\"before\", this.currVersionNum, this.current);\n  this.current = this._insert(element, this.current);\n  console.log(\"after\", this.currVersionNum, this.current);\n  return this.current;\n};\n\nPersistentAVLTree.prototype._insert = function (element, node) {\n  // if (!(element instanceof Line)) {\n  //   console.log(\"not line:\", element);\n  //   element = new Line(element);\n  // }\n  // console.log(\"Inserting: \", this.currVersionNum, element);\n  if (node === null) {\n    const newNode = new Node(element);\n    return newNode;\n  }\n  node = copyNode(node);\n\n  // just copy here, propagate to children\n  var direction = this._compare(element, node.element);\n  // console.log(\"comapare\", element, node.element, direction);\n  if (direction < 0) {\n    node.left = this._insert(element, node.left);\n  } else if (direction > 0) {\n    node.right = this._insert(element, node.right);\n  }\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n\n  var balance = getBalance(node);\n\n  if (balance < -1) {\n    var subLeftDirection = this._compare(element, node.left.element);\n    if (subLeftDirection < 0) {\n      return copySubtree(this._rightRotate(node));\n    } else if (subLeftDirection > 0) {\n      node.left = this._leftRotate(node.left);\n      return copySubtree(this._rightRotate(node));\n    }\n  } else if (balance > 1) {\n    var subRightDirection = this._compare(element, node.right.element);\n    if (subRightDirection > 0) {\n      return copySubtree(this._leftRotate(node));\n    } else if (subRightDirection < 0) {\n      node.right = this._rightRotate(node.right);\n      return copySubtree(this._leftRotate(node));\n    }\n  }\n  return node;\n};\n\nPersistentAVLTree.prototype._rightRotate = function (node) {\n  // console.log(\"RIGHT ROTATE\");\n  var l = node.left;\n  var lr = l.right;\n  l.right = node;\n  node.left = lr;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  l.height = Math.max(getHeight(l.left), getHeight(l.right)) + 1;\n  return l;\n};\n\nPersistentAVLTree.prototype._leftRotate = function (node) {\n  // console.log(\"LEFT ROTATE\");\n  var r = node.right;\n  var rl = r.left;\n  r.left = node;\n  node.right = rl;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  r.height = Math.max(getHeight(r.left), getHeight(r.right)) + 1;\n  return r;\n};\n\nPersistentAVLTree.prototype.delete = function (element) {\n  // console.log(\"deleting \", element, this.current);\n  if (this.current !== null) {\n    this.current = this._delete(element, this.current, null);\n    console.log(\"AFTER DELETE: \", this.current);\n  }\n};\n\nPersistentAVLTree.prototype._delete = function (element, node, parent) {\n  console.log(\"DELETE: \", this.currVersionNum, element, node, parent);\n  if (node === null) {\n    return null;\n  }\n  const oldNode = node;\n  node = copyNode(node);\n  // console.log(\"copyNode: \", node);\n  var direction = this._compare(element, node.element);\n  if (direction < 0) {\n    // go left\n    if (node.left && this._compare(element, node.left.element) === 0) {\n      this._delete(element, node.left, node);\n    } else {\n      node.left = this._delete(element, node.left, node);\n    }\n  } else if (direction > 0) {\n    // go right\n    if (node.right && this._compare(element, node.right.element) === 0) {\n      this._delete(element, node.right, node);\n    } else {\n      node.right = this._delete(element, node.right, node);\n    }\n  } else if (node.left !== null && node.right !== null) {\n    // found our target element\n    var detachedMax = this._deleteMax(node.left, node);\n    node.element = detachedMax.element; // TODO: if we end up adding data to nodes, copy it here\n  } else if (node.left === null) {\n    if (node.right === null) {\n      //console.log(\"both children empty\", node, parent);\n      // both children are empty\n      if (parent === null) {\n        return null;\n      }\n      if (parent.right === oldNode) {\n        //console.log(\"setting right to null\");\n        parent.right = null;\n        //console.log(parent);\n      } else {\n        //console.log(\"setting left to null\");\n        parent.left = null;\n      }\n    } else {\n      // only has right\n      if (parent === null) {\n        return node.right;\n      }\n      if (parent.right === oldNode) {\n        parent.right = node.right;\n      } else {\n        parent.left = node.right;\n      }\n\n      node.right = null;\n    }\n  } else {\n    // only has left\n    if (parent === null) {\n      return node.left;\n    }\n    if (parent.right === oldNode) {\n      parent.right = node.left;\n    } else {\n      parent.left = node.left;\n    }\n\n    node.left = null;\n  }\n  // console.log(\"_balance\", node, parent);\n  return this._balance(node, parent); // backtrack and balance everyone\n};\n\nPersistentAVLTree.prototype.deleteMax = function () {\n  return this._deleteMax(this.current, null).element;\n};\n\nPersistentAVLTree.prototype._deleteMax = function (node, parent) {\n  console.log(\"DELETE_MAX:\");\n  var max;\n  if (node.right === null) {\n    // max found\n    max = this._delete(node.element, node, parent);\n    this._balance(node, parent);\n    return max;\n  } // not yet at max, keep going\n  max = this._deleteMax(node.right, node);\n  this._balance(node, parent); // backtrack and balance everyone in the left sub tree\n  return max;\n};\n\nPersistentAVLTree.prototype.getMin = function (node) {\n  if (node.left === null) {\n    return node;\n  }\n  return this.getMin(node.left);\n};\n\nPersistentAVLTree.prototype.getMax = function (node) {\n  if (node.right === null) {\n    return node;\n  }\n  return this.getMax(node.right);\n};\n\nPersistentAVLTree.prototype._balance = function (node, parent) {\n  console.log(\"Balance: \", this.current, this.currVersionNum, node, parent);\n  node = copySubtree(node);\n  updateHeight(node);\n  var balance = getBalance(node);\n  var newRoot, x, y, z;\n  if (balance < -1) {\n    node = copySubtree(node);\n    console.log(\"balance < -1\");\n    z = node;\n    y = node.left;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  } else if (balance > 1) {\n    node = copySubtree(node);\n    console.log(\"balance > 1\");\n    z = node;\n    y = node.right;\n    x = this._getTallestSubtree(y);\n    newRoot = this._triNodeRestructure(x, y, z, parent);\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n\n    updateHeight(z);\n    updateHeight(x);\n    updateHeight(y);\n    return newRoot;\n  } else {\n    console.log(\"no balance needed\");\n  }\n  updateHeight(node);\n  return node;\n};\n\nPersistentAVLTree.prototype._getTallestSubtree = function (node) {\n  var balance = getBalance(node);\n  if (balance < 0) {\n    return node.left;\n  }\n  return node.right;\n};\n\nPersistentAVLTree.prototype._triNodeRestructure = function (x, y, z, parent) {\n  console.log(\"TRINODE: \", this.currVersionNum, x, y, z, parent, this.current);\n  var a, b, c;\n  if (z.right === y && y.left === x) {\n    a = z;\n    b = x;\n    c = y;\n  }\n  if (z.right === y && y.right === x) {\n    a = z;\n    b = y;\n    c = x;\n  }\n  if (z.left === y && y.left === x) {\n    a = x;\n    b = y;\n    c = z;\n  }\n  if (z.left === y && y.right === x) {\n    a = y;\n    b = x;\n    c = z;\n  }\n  if (\n    z.og === this.current ||\n    z === this.current ||\n    z.element === this.current.element || // TODO: THIS IS JANK\n    parent === null\n  ) {\n    this.current = b;\n  } else if (parent.left === z) {\n    parent.left = b;\n  } else {\n    parent.right = b;\n  }\n  if (b.left !== x && b.left !== y && b.left !== z) {\n    a.right = b.left;\n  }\n  if (b.right !== x && b.right !== y && b.right !== z) {\n    c.left = b.right;\n  }\n  b.left = a;\n  b.right = c;\n  return b;\n};\n\nPersistentAVLTree.prototype.forEach = function (func) {\n  this._forEach(this.current, func);\n};\n\nPersistentAVLTree.prototype._forEach = function (node, func) {\n  if (node !== null) {\n    this._forEach(node.left, func);\n    func(node.element);\n    this._forEach(node.right, func);\n  }\n};\n\nPersistentAVLTree.prototype.getElementsAtDepth = function (targetDepth) {\n  var foundNodes = [];\n  this._getElementsAtDepth(targetDepth, 0, this.current, foundNodes);\n  return foundNodes;\n};\n\nPersistentAVLTree.prototype._getElementsAtDepth = function (\n  targetDepth,\n  current,\n  node,\n  foundNodes\n) {\n  if (node === null) {\n    return;\n  }\n  if (targetDepth === current) {\n    foundNodes.push(node.element);\n    return;\n  }\n  this._getElementsAtDepth(targetDepth, current + 1, node.left, foundNodes);\n  this._getElementsAtDepth(targetDepth, current + 1, node.right, foundNodes);\n};\n\n// module.exports = AvlTree;\n","const eventType = {\n  START: 'start',\n  END: 'end',\n  CROSS: 'cross'\n};\n\nexport default eventType;","export default __webpack_public_path__ + \"static/media/plus.18e46bbf.svg\";","export default __webpack_public_path__ + \"static/media/ray.86b55e34.svg\";","export default __webpack_public_path__ + \"static/media/wrench.6be9f8c4.svg\";","export default class PriorityQueue {\n  constructor() {\n    this.heap = [];\n  }\n\n  leftChild = (index) => index * 2 + 1;\n  rightChild = (index) => index * 2 + 2;\n  parent = (index) => Math.floor((index - 1) / 2);\n  peek = () => this.heap[0];\n\n  swap = (indexOne, indexTwo) => {\n    const tmp = this.heap[indexOne];\n    this.heap[indexOne] = this.heap[indexTwo];\n    this.heap[indexTwo] = tmp;\n  }\n\n  insert = (element) => {\n    this.heap.push(element);\n    let idx = this.heap.length - 1;\n\n    while (idx !== 0 && this.heap[idx].val < this.heap[this.parent(idx)].val) {\n      this.swap(idx, this.parent(idx));\n      idx = this.parent(idx);\n    }\n  }\n\n  extractMin = () => {\n    const root = this.heap.shift();\n\n    this.heap.unshift(this.heap[this.heap.length - 1]);\n    this.heap.pop();\n\n    this.heapify(0);\n    return root;\n  }\n  \n  heapify = (index) => {\n    let left = this.leftChild(index);\n    let right = this.rightChild(index);\n    let largest = index;\n\n    if (left < this.heap.length && this.heap[largest].val > this.heap[left].val) {\n      largest = left;\n    }\n\n    if (right < this.heap.length && this.heap[largest].val > this.heap[right].val) {\n      largest = right;\n    }\n\n    if (largest !== index) {\n      this.swap(largest, index);\n      this.heapify(largest);\n    }\n  }\n};","import React, { useRef, useState } from \"react\";\nimport Mode from \"./mode\";\nimport \"./App.scss\";\nimport { PersistentAVLTree, Line, copySubtree } from \"./PersistentAVLTree\";\nimport EventType from \"./eventType\";\n\nimport plusIcon from \"./img/plus.svg\";\nimport rayIcon from \"./img/ray.svg\";\nimport wrenchIcon from \"./img/wrench.svg\";\nimport PriorityQueue from \"./priorityQueue\";\n\nconst App = () => {\n  const [mode, setMode] = useState(Mode.CREATING_LINE_SEGMENT);\n  const [firstPoint, setFirstPoint] = useState(null);\n  const [lines, setLines] = useState([]);\n  const [tree, setTree] = useState(new PersistentAVLTree());\n\n  const canvasRef = useRef(null);\n\n  const buildTree = (lines) => {\n    if (lines.length === 0) {\n      return;\n    }\n\n    const tree = new PersistentAVLTree();\n    const dx = 1;\n\n    const queue = new PriorityQueue();\n\n    lines.forEach((line) => {\n      queue.insert({\n        eventType: EventType.START,\n        line,\n        val: line.x1,\n        shouldInsert: true\n      });\n\n      queue.insert({\n        eventType: EventType.END,\n        line,\n        val: line.x2\n      });\n    });\n\n    for (let i = 0; i < window.innerWidth; i += dx) {\n      if (queue.peek() === undefined || queue.peek().val > i) {\n        tree.step();\n        continue;\n      }\n\n      const evt = queue.extractMin();\n      console.log(evt);\n\n      if (evt.eventType === EventType.START) {\n        let line, tempTree, x1, y1, x2, y2;\n\n        if (evt.shouldInsert) {\n          x1 = evt.line.x1;\n          y1 = window.innerHeight - evt.line.y1;\n          x2 = evt.line.x2;\n          y2 = window.innerHeight - evt.line.y2;\n\n          line = new Line(x1, y1, x2, y2);\n          tempTree = tree.insert(line);\n        } else {\n          x1 = evt.line.startX;\n          y1 = evt.line.startY;\n          x2 = evt.line.endX;\n          y2 = evt.line.endY;\n\n          line = evt.line;\n          tempTree = tree.current;\n        }\n\n        // Take care of crossing segments that follow this event\n        const successor = tree.getSuccessor(line, tempTree);\n        const predecessor = tree.getPredecessor(line, tempTree);\n\n        const processIntersection = (cmp) => {\n          const x3 = cmp.element.startX;\n          const y3 = cmp.element.startY;\n          const x4 = cmp.element.endX;\n          const y4 = cmp.element.endY;\n\n          // Checks if q is on line segment pr\n          const onSegment = (p, q, r) => q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\n          const intersectionX = ((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) / ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n          const intersectionY = ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) / ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n\n          if (intersectionX > i && onSegment({x: x1, y: y1}, {x: intersectionX, y: intersectionY}, {x: x2, y: y2}) && onSegment({x: x3, y: y3}, {x: intersectionX, y: intersectionY}, {x: x4, y: y4})) {\n            queue.insert({\n              eventType: EventType.CROSS,\n              line1: line,\n              line2: cmp.element,\n              intX: intersectionX,\n              intY: intersectionY,\n              val: intersectionX - 1\n            });\n          }\n        };\n\n        if (successor !== null) processIntersection(successor);\n        if (predecessor !== null) processIntersection(predecessor);\n      } else if (evt.eventType === EventType.END) {\n        const { x1, y1, x2, y2 } = evt.line;\n        const line = new Line(x1, window.innerHeight - y1, x2, window.innerHeight - y2);\n        tree.delete(line);\n      } else if (evt.eventType === EventType.CROSS) {\n        const tmp = copySubtree(tree.current);\n        const node1 = tree._search(evt.line1, tmp).node;\n        const node2 = tree._search(evt.line2, tmp).node;\n\n        if (node1 === null || node2 === null) {\n          // TODO: Show error message\n          tree.step();\n          continue;\n        }\n\n        tree.swap(node1, node2);\n        tree.current = tmp;\n\n        queue.insert({\n          eventType: EventType.START,\n          line: node1.element,\n          val: Math.ceil(evt.intX),\n          shouldInsert: false\n        });\n\n        queue.insert({\n          eventType: EventType.START,\n          line: node2.element,\n          val: Math.ceil(evt.intX),\n          shouldInsert: false\n        });\n      }\n\n      tree.step();\n    }\n\n    return tree;\n  };\n\n  const createLineElement = (line, id = null) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    elem.setAttribute(\"x1\", line.x1);\n    elem.setAttribute(\"y1\", line.y1);\n    elem.setAttribute(\"x2\", line.x2);\n    elem.setAttribute(\"y2\", line.y2);\n\n    if (id !== null) {\n      elem.setAttribute(\"id\", id);\n    }\n\n    return elem;\n  };\n\n  const createCircleElement = (x, y, r = 4) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n    elem.setAttribute(\"cx\", x);\n    elem.setAttribute(\"cy\", y);\n    elem.setAttribute(\"r\", r);\n    return elem;\n  };\n\n  const handleClick = (e) => {\n    if (e.target.tagName.toLowerCase() !== \"svg\") return;\n\n    if (mode === Mode.CREATING_LINE_SEGMENT) {\n      if (firstPoint === null) {\n        setFirstPoint({\n          x: e.clientX,\n          y: e.clientY,\n        });\n\n        canvasRef.current.appendChild(createCircleElement(e.clientX, e.clientY));\n      } else {\n        setFirstPoint(null);\n\n        // True if e.clientX/e.clientY describes x1\n        // x1 is the point with the smaller x coordinate\n        const newPoint = e.clientX < firstPoint.x;\n\n        const line = {\n          x1: newPoint ? e.clientX : firstPoint.x,\n          y1: newPoint ? e.clientY : firstPoint.y,\n          x2: !newPoint ? e.clientX : firstPoint.x,\n          y2: !newPoint ? e.clientY : firstPoint.y,\n        };\n\n        setLines(lines.concat(line));\n\n        canvasRef.current.appendChild(createLineElement(line));\n        canvasRef.current.appendChild(createCircleElement(e.clientX, e.clientY));\n      }\n    } else if (mode === Mode.SHOOTING_RAY) {\n    }\n  };\n\n  const handleMouseMove = (e) => {\n    if (mode !== Mode.SHOOTING_RAY || tree === undefined) {\n      return;\n    }\n\n    if (document.getElementById(\"ray\") !== null) {\n      document.getElementById(\"ray\").remove();\n    }\n\n    const elem = tree.shootVerticalRay(e.clientX, window.innerHeight - e.clientY);\n    // console.log(elem);\n\n    if (elem === null || elem.element === undefined) {\n      return;\n    }\n\n    const {startX, startY, endX, endY} = elem.element;\n    const topRayY = startY + (endY - startY) / (endX - startX) * (e.clientX - startX);\n\n    canvasRef.current.appendChild(createLineElement({\n      x1: e.clientX,\n      y1: e.clientY,\n      x2: e.clientX,\n      y2: window.innerHeight - topRayY\n    }, \"ray\"));\n  };\n\n  return (\n    <div className=\"App\" onClick={handleClick}>\n      <div className=\"vertical-lines\" />\n      <div className=\"horizontal-lines\" />\n      <div className=\"button-bar\">\n        <button\n          className={mode === Mode.CREATING_LINE_SEGMENT ? \"selected\" : \"\"}\n          onClick={() => setMode(Mode.CREATING_LINE_SEGMENT)}\n        >\n          <img src={plusIcon} alt=\"Create line segment\" />\n          <p>Create line segment</p>\n        </button>\n        <button\n          className={mode === Mode.SHOOTING_RAY ? \"selected\" : \"\"}\n          onClick={() => {\n            if (lines.length === 0) {\n              return;\n            }\n\n            setTree(buildTree(lines));\n            setMode(Mode.SHOOTING_RAY);\n          }}\n        >\n          <img src={rayIcon} alt=\"Shoot vertical ray\" />\n          <p>Shoot vertical ray</p>\n        </button>\n        <button\n          onClick={() => {\n            while (canvasRef.current.firstChild) {\n              canvasRef.current.removeChild(canvasRef.current.firstChild);\n            }\n\n            const lines = [\n              { x1: 100, y1: 100, x2: 300, y2: 100 },\n              { x1: 99, y1: 100, x2: 100, y2: 150 },\n              { x1: 101, y1: 150, x2: 299, y2: 150 },\n              { x1: 301, y1: 100, x2: 302, y2: 150 },\n            ];\n\n            lines.forEach((line) => {\n              canvasRef.current.appendChild(createLineElement(line));\n              canvasRef.current.appendChild(createCircleElement(line.x1, line.y1));\n              canvasRef.current.appendChild(createCircleElement(line.x2, line.y2));\n            });\n\n            setLines(lines);\n            setTree(buildTree(lines));\n            setMode(Mode.SHOOTING_RAY);\n          }}\n        >\n          <img src={wrenchIcon} alt=\"Create user interface\" />\n          <p>Create user interface</p>\n        </button>\n      </div>\n      <svg ref={canvasRef} width={window.innerWidth} height={window.innerHeight} onMouseMove={handleMouseMove} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}